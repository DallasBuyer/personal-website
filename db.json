{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/even/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/even/source/robots.txt","path":"robots.txt","modified":0,"renderable":1},{"_id":"themes/even/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","path":"fonts/chancery/apple-chancery-webfont.eot","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","path":"fonts/chancery/apple-chancery-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","path":"fonts/chancery/apple-chancery-webfont.woff","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","path":"fonts/chancery/apple-chancery-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/even/source/js/src/even.js","path":"js/src/even.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/nprogress/nprogress.min.css","path":"lib/nprogress/nprogress.min.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/nprogress/nprogress.min.js","path":"lib/nprogress/nprogress.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/pjax/jquery.pjax.min.js","path":"lib/pjax/jquery.pjax.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.js","path":"lib/slideout/slideout.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.min.js","path":"lib/slideout/slideout.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","path":"fonts/chancery/apple-chancery-webfont.svg","modified":0,"renderable":1},{"_id":"themes/even/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/even/.eslintrc","hash":"0fcde446104e73d7159f8574f28fe661acdb384e","modified":1556182608117},{"_id":"themes/even/.travis.yml","hash":"dca92724f12fe3cca2679c7aff49e7c52ed05f88","modified":1556182608117},{"_id":"themes/even/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1556182608117},{"_id":"themes/even/README.md","hash":"29a3ea5a93871766500e8c85dfabe4f991bfbb2a","modified":1562906997626},{"_id":"themes/even/_config.yml","hash":"22dc2e7253dbd096d497f0358af34e8d77a17d4e","modified":1563150328376},{"_id":"themes/even/package.json","hash":"f4940e17eca832bb0f1bb903570b74c10fc175d2","modified":1556182608121},{"_id":"source/_posts/ARIMA-1 Stationarity and Difference.md","hash":"40c0936bbe76d5508bcd2ff6692aa489a6329a02","modified":1563597598792},{"_id":"source/_posts/ARIMA-2 Backshift Notation.md","hash":"8b22294472ce8da0d20a1b9828adeefe3709ae04","modified":1563597609120},{"_id":"source/_posts/ARIMA-3 Autoregressive model and Moving average models.md","hash":"c9c919f816c7241eafd5978e456c750dba2ac819","modified":1563601488968},{"_id":"source/_posts/Co-Transfer-Learning.md","hash":"1b431c6e877cab488bbcefcfe1b933e021d1fc57","modified":1563597543692},{"_id":"source/_posts/overview: time series models.md","hash":"62abdc15176fe81c3ab1b5a0a4e1081644c60044","modified":1563597559488},{"_id":"source/_posts/random network generator.md","hash":"8a0986ba43e087d18f85336065c499396ca49db1","modified":1563597578360},{"_id":"source/about/index.md","hash":"e5ca54872110eaff55c433e192e02e23da06d096","modified":1563603610168},{"_id":"source/categories/index.md","hash":"b1d2fbd8c27ae854729a3b574f1aaeb0139a25f4","modified":1556191346000},{"_id":"source/publications/index.md","hash":"0017dea17d4548f7ed0e20c20b00a9f4d32873ee","modified":1559390486000},{"_id":"themes/even/languages/default.yml","hash":"5c05eeaa88b399193d01cb1c418707d998d8344d","modified":1556193526715},{"_id":"themes/even/languages/en.yml","hash":"6b37a22d45b8152b3e79405b60e79e6c1b9abb2e","modified":1556193559035},{"_id":"themes/even/languages/zh-cn.yml","hash":"f7da3fc6252df9d19abd1321b3c5a8c2ad13cca7","modified":1556182608117},{"_id":"themes/even/layout/_layout.swig","hash":"00dc81c1d5751144a59de05db415c51954973230","modified":1556182608117},{"_id":"themes/even/layout/archive.swig","hash":"fde460d3c38ad132ef5effbdbaf66c48c8296c3b","modified":1556182608121},{"_id":"themes/even/layout/categories.swig","hash":"a14078a46bc45e1e02c1bc450dc894d693975707","modified":1556182608121},{"_id":"themes/even/layout/index.swig","hash":"4bc20e7616ace7cf12c17328cb84b8203b763b09","modified":1556182608121},{"_id":"themes/even/layout/page.swig","hash":"a6cf4e5bc3cb9a9ea6a6ed3b074cff6d69073f14","modified":1556182608121},{"_id":"themes/even/layout/post.swig","hash":"88f3f7538c75271133d00f3b1a0d0a40ec953c8d","modified":1556182608121},{"_id":"themes/even/layout/tags.swig","hash":"ce15107017d6e1663f2b0be92d7758622e17861f","modified":1556182608121},{"_id":"themes/even/source/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1556182608121},{"_id":"themes/even/source/robots.txt","hash":"eed1ebad39b24e7942fcaf8f27da7487eb9f956e","modified":1556182608121},{"_id":"themes/even/layout/_macro/archive.swig","hash":"641f02ccabc1cc59ecc73f2a40516088495e9ff9","modified":1556182608117},{"_id":"themes/even/layout/_macro/post.swig","hash":"67a086170715a6a4db21bfd1e35bc6582bbf0ce7","modified":1556182608117},{"_id":"themes/even/layout/_partial/comments.swig","hash":"d81caf74b2db2b10c96b71615fc7c8c73ba7b211","modified":1556182608117},{"_id":"themes/even/layout/_partial/footer.swig","hash":"418855b4ace54609431c52e091506e7a6180d433","modified":1556182608117},{"_id":"themes/even/layout/_partial/header.swig","hash":"2c3a0fba88605a98b56528437e1c2160942cdba4","modified":1556182608117},{"_id":"themes/even/layout/_partial/head.swig","hash":"b0bcf3d67bc0bab02a891c48189d523f6b8086fd","modified":1556182608117},{"_id":"themes/even/layout/_partial/slideout.swig","hash":"ecfaa8a922eef7d0c6eb05592d390ae36d6da9e3","modified":1556182608117},{"_id":"themes/even/layout/_partial/pagination.swig","hash":"caab675c3c1df76d5c047d5c4dc42ffcb79caa9a","modified":1556182608117},{"_id":"themes/even/layout/_script/analytics.swig","hash":"b1fe6eb7e42594383dba5e5a6a9ed655158e1f25","modified":1556182608117},{"_id":"themes/even/layout/_script/comments.swig","hash":"d7557406a8e53b4819bf76566285dc15499a7c8d","modified":1556182608117},{"_id":"themes/even/layout/_script/counter.swig","hash":"787d956687d4846286b11c68fb2a81a0d981d4b1","modified":1556182608117},{"_id":"themes/even/layout/_script/libs.swig","hash":"8de728ddb0e409ff9aacd7f71643a9770d64970c","modified":1556182608121},{"_id":"themes/even/layout/_script/push.swig","hash":"2aacb350e2e4870f175ba4783c710c4c4006274c","modified":1556182608121},{"_id":"themes/even/layout/_script/theme.swig","hash":"ef8207e22d10ba11821749e1dc0041cf0104d7e3","modified":1556182608121},{"_id":"themes/even/source/css/_base.scss","hash":"ffd8c02b4e1dde0433458b0fef02f01a1fd0f1dd","modified":1556182608121},{"_id":"themes/even/source/css/_variables.scss","hash":"5c656de0ea439c04f69211541f7edcb14d17adc0","modified":1563150304659},{"_id":"themes/even/source/css/style.scss","hash":"d67f03fb349eb5795aded6e864437b5242fe789f","modified":1556182608121},{"_id":"themes/even/layout/_partial/_footer/social.swig","hash":"45159378a4abd916367a5a10cf39eabb0d460c70","modified":1556182608117},{"_id":"themes/even/layout/_partial/_head/meta.swig","hash":"067665118c38c2f579f801ff53bab0d32b28109c","modified":1556182608117},{"_id":"themes/even/layout/_partial/_post/copyright.swig","hash":"517533bf6cb5292a55be11036ef72d699acc33ef","modified":1556182608117},{"_id":"themes/even/layout/_partial/_post/reward.swig","hash":"2a026a5252082c5cc9fbbb5aedf29770d1d56e62","modified":1556182608117},{"_id":"themes/even/layout/_partial/_post/toc.swig","hash":"3eb2de1ad24607af9497663149730292227022cf","modified":1556182608117},{"_id":"themes/even/layout/_script/_analytics/baidu-analytics.swig","hash":"707864f34f7750a438817acef927f1e4075c5cf8","modified":1556182608117},{"_id":"themes/even/layout/_script/_analytics/google-analytics.swig","hash":"5143d9e510bfd98723a009780ba23aebade21b29","modified":1556182608117},{"_id":"themes/even/layout/_script/_comments/changyan.swig","hash":"16f457c9f4e6e594ab9de0aa7e3a7619c175937a","modified":1556182608117},{"_id":"themes/even/layout/_script/_comments/disqus.swig","hash":"52009d5092377937af79ea9e391262d34df6d36f","modified":1556182608117},{"_id":"themes/even/layout/_script/_comments/livere.swig","hash":"dfc42123f637b775cf85967476cb8439d19dbe4c","modified":1556182608117},{"_id":"themes/even/source/css/_common/_animation.scss","hash":"f32d2444f0ab4dcb8b811ae1bccae6073f21a988","modified":1556182608121},{"_id":"themes/even/source/css/_common/_normalize.scss","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1556182608121},{"_id":"themes/even/source/css/_common/_utils.scss","hash":"9ec5b1f6cf47260eba2729ff4931111b808644f0","modified":1556182608121},{"_id":"themes/even/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1562910661282},{"_id":"themes/even/source/css/_partial/_archive.scss","hash":"c0cd7dc3462f7726428a30f5852fcf5577df5961","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_back-to-top.scss","hash":"de94a4546dad90f588e902c9641d94b31fd6625b","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_categories.scss","hash":"96f47000d25ef4e0e948f8f43fa4e2983ff0d746","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_footer.scss","hash":"76f3a72440be8aa1e93d8ddc5ea958777d1545ab","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_header.scss","hash":"4a3e92feef33bed0021f1a65a801c24ee7d5946f","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_iconfont.scss","hash":"6effdc886469ee76f3c66451ef4b04baaecd48ef","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_mathjax.scss","hash":"4005390d40cfc457e4d07dbaf78b718e01b651f4","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_mobile.scss","hash":"0d1c60bd92f8e5db01e7843934251152ec4d6d44","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_nprogress.scss","hash":"6a3ed904b45cbeecfbf632627ad647718bf64c22","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_pagination.scss","hash":"b24db39534e180ebcebba2e81d91d9f1d534eea1","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post.scss","hash":"655e8f56328a220b64d54c400990165a015fecd9","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_tags.scss","hash":"fb4bf54b34291d5b72598a7ba4d3e370c8ad9383","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_slideout.scss","hash":"e4820a42698f647a824575b234835b9ce4ac4797","modified":1556182608121},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1556182608121},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1556182608121},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1556182608121},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1556182608121},{"_id":"themes/even/source/js/src/even.js","hash":"051ca12b1d30ab2ea1e27cbbeaeb2dbd62c8b6ac","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1556182608121},{"_id":"themes/even/source/lib/nprogress/nprogress.min.css","hash":"79a4f6785c09b8546a37f927e4a5d89af7156171","modified":1556182608121},{"_id":"themes/even/source/lib/nprogress/nprogress.min.js","hash":"3cca20b36156d9974312555d55db3fed194a3d04","modified":1556182608121},{"_id":"themes/even/source/lib/pjax/jquery.pjax.min.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1556182608121},{"_id":"themes/even/source/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1556182608121},{"_id":"themes/even/source/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1556182608121},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1556182608121},{"_id":"themes/even/source/lib/jquery/jquery.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_footer/_copyright.scss","hash":"afbc0f90c674e5cd5fd7509eb1296d60b999d4e1","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_footer/_social.scss","hash":"bca6a1036951c2475278bfbd3a5ce51ff861e9a3","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_header/_logo.scss","hash":"109073dde15146d835bf06faa2f256d1ac658315","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_header/_menu.scss","hash":"454214ab2b5a0ca17d6872068c52bfd01ac02fdc","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post/_code.scss","hash":"25d366dc9dc57f1cc9498cd20e46eacb7d55b4c5","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post/_content.scss","hash":"7cf29c7af82c31d82f09dedfca09ea2d863b92ff","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post/_copyright.scss","hash":"71d949b053b0176621fdba5dc1e2e740f60b467d","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post/_footer.scss","hash":"9f2ab0ac20b2a8bfd315febd387c399f72f43d10","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post/_header.scss","hash":"f655fc254804e59d1426471f41127f26d06432b6","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post/_reward.scss","hash":"66ec9faa27ed879dc9a2ca59c73ed6bfd5e61dcd","modified":1556182608121},{"_id":"themes/even/source/css/_partial/_post/_toc.scss","hash":"5806ce8d5c4e2d70e12e03ab48327bdebc68c67b","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1556182608121},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1556182608121},{"_id":"public/content.json","hash":"0cf6928b094f3d110488fe16a8f73f6f925bd20a","modified":1563603615950},{"_id":"public/about/index.html","hash":"d2508b683234be7772c926eeac70f5714772b965","modified":1563603615956},{"_id":"public/categories/index.html","hash":"9c4d5106fefdad3f1b3044acecf481f8ea0d8458","modified":1563601874836},{"_id":"public/publications/index.html","hash":"22f0b0e0c0dae9fbf00ee08073b3b4c471afdcbe","modified":1563601874837},{"_id":"public/2019/07/19/ARIMA-3 Autoregressive model and Moving average models/index.html","hash":"fe2356534be9920a63424d5e3c21edea3dddfb21","modified":1563601874837},{"_id":"public/2019/07/19/ARIMA-2 Backshift Notation/index.html","hash":"e996e05ab44d1e3a2165abd07517374dd50a3c46","modified":1563601874838},{"_id":"public/2019/07/19/ARIMA-1 Stationarity and Difference/index.html","hash":"ebda0c46331149784b798a5b9baccff0694f5a3e","modified":1563601874838},{"_id":"public/archives/index.html","hash":"1ab8f49f3c81bc83eba6cb35cb268d9cb8deb45f","modified":1563601939311},{"_id":"public/archives/2019/index.html","hash":"26172f64f07f8ff6de2b47b895c1e73c970d0d98","modified":1563601939311},{"_id":"public/archives/2019/04/index.html","hash":"eb257f8fb859972f8563703e8c2a0052be9743b7","modified":1563601874838},{"_id":"public/archives/2019/05/index.html","hash":"67ee17732690aac06b66f21a0221568be57ddc6f","modified":1563601874838},{"_id":"public/archives/2019/07/index.html","hash":"546d2a539ef68f7e32e2807622b07cee93d5b4e9","modified":1563601874838},{"_id":"public/categories/time-series-models/index.html","hash":"46b16665240ec9da5f82889b84c285dad2b92225","modified":1563601874839},{"_id":"public/categories/transfer-learning/index.html","hash":"f8970032f3aec23ceaabb880f8c814a50371243b","modified":1563601874839},{"_id":"public/categories/neural-architecture-search/index.html","hash":"cdc661cccb2b4d797bc89babdd1cb5365cd92417","modified":1563601874839},{"_id":"public/index.html","hash":"e38143624fd647450a91415538782f1b396eb4c5","modified":1563601874839},{"_id":"public/tags/time-series-models/index.html","hash":"215d3ab38ee16ff5e431458a49f194307619806d","modified":1563601874839},{"_id":"public/tags/transfer-learning/index.html","hash":"f425d9feba67e0226db73d06452a4ac36e52e7e6","modified":1563601874839},{"_id":"public/tags/random-neural-network-neural-architecture-search/index.html","hash":"b4a54718f1415f02f3ce7112839e90fc3ea08e11","modified":1563601874839},{"_id":"public/2019/07/18/overview: time series models/index.html","hash":"ce8f15c85b415908fc54441e82fa69e8556962ce","modified":1563601874839},{"_id":"public/2019/05/03/random network generator/index.html","hash":"4d73cf5b7e28f97d0532578a673c687ca6a6cc91","modified":1563601874839},{"_id":"public/2019/04/25/Co-Transfer-Learning/index.html","hash":"3d00167e8255b8857a6ece884b6e23fbc673f6a7","modified":1563601874839},{"_id":"public/archives/page/2/index.html","hash":"90106f03de5b5f887015d281ebb3f8aa62087f78","modified":1563601874842},{"_id":"public/archives/2019/page/2/index.html","hash":"d18ea6459bd4c8bf49dfc564b1e2f1a8d5c22599","modified":1563601874842},{"_id":"public/page/2/index.html","hash":"76062f6fcea52e7d01a357ae22be3432b391731f","modified":1563601874842},{"_id":"public/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1563601874844},{"_id":"public/robots.txt","hash":"eed1ebad39b24e7942fcaf8f27da7487eb9f956e","modified":1563601874844},{"_id":"public/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1563601874844},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1563601874844},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1563601874844},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1563601874844},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1563601874844},{"_id":"public/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1563601874844},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1563601874844},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1563601874844},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1563601874845},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1563601874845},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1563601874845},{"_id":"public/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1563601874848},{"_id":"public/js/src/even.js","hash":"051ca12b1d30ab2ea1e27cbbeaeb2dbd62c8b6ac","modified":1563601874855},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1563601874855},{"_id":"public/lib/nprogress/nprogress.min.css","hash":"79a4f6785c09b8546a37f927e4a5d89af7156171","modified":1563601874855},{"_id":"public/lib/nprogress/nprogress.min.js","hash":"3cca20b36156d9974312555d55db3fed194a3d04","modified":1563601874855},{"_id":"public/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1563601874855},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1563601874855},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1563601874855},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1563601874856},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1563601874856},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1563601874856},{"_id":"public/lib/pjax/jquery.pjax.min.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1563601874857},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1563601874859},{"_id":"public/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1563601874861},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1563601874863},{"_id":"public/lib/jquery/jquery.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1563601874863},{"_id":"public/css/style.css","hash":"4d9a2a3b29b0d2d2aab9c5cfc22d4008aaf76e14","modified":1563601874904}],"Category":[{"name":"time series models","_id":"cjyb46not0004snadcmoo2kae"},{"name":"transfer learning","_id":"cjyb46npa000nsnadvr6qr73e"},{"name":"neural architecture search","_id":"cjyb46npb000psnadjupz19hj"}],"Data":[],"Page":[{"title":"Biography","date":"2019-04-24T04:54:31.000Z","_content":"\n## Peng Xu 许鹏\nPostgraduate Student\nSoftware Engineering\nSchool of Digital Media, Jiangnan University\nEmail: dallasbuyer [AT] stu.jiangnan.edu.cn\nWeChat: xu172447385\n\n## Interests\nI am interested in artificial intelligence, transfer learning, multi-view learning, fuzzy machine learning and interpretable machine learning.\n\n## Publications\n**Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning**\n**Peng Xu**, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang\n*IEEE Transactions on Fuzzy System*, 2019. [[PDF]](https://arxiv.org/abs/1904.10683v1)\n\n**Transfer Representation Learning with TSK Fuzzy System**\n**Peng Xu**, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang\n*arXiv:1901.02703*, 2019. [[PDF]](http://export.arxiv.org/abs/1901.02703)\n\n**Multi-view Information-theoretic Co-clustering for Co-occurrence Data**\n**Peng Xu**, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang\n*AAAI (spotlight)*, 2019. [[PDF]](https://arxiv.org/abs/1905.10594#) [[CODE]](https://github.com/DallasBuyer/MVITCC)\n\n**Joint Information Preservation for Heterogeneous Domain Adaptation**\n**Peng Xu**, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang\nTechical Report, 2019. [[PDF]](https://arxiv.org/abs/1905.08924)\n\n**Deep Image Feature Learning with Fuzzy Fules**\nXiang Ma, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\nTechical Report, 2019. [[PDF]](http://export.arxiv.org/abs/1905.10575)\n\n**Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals**\nZhaohong Deng, **Peng Xu**, Lixiao Xie, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Neural Systems and Rehabilitation Engineering*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8395430)\n\n**Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals**\nLixiao Xie, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Cybernetics*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8337847)\n\n\n## Talks\nSpotlight Talk on the Thirty-Third AAAI Conference on Artificial Intelligence, Hawaii, USA, 01/2019\n\n## Reviewer\n\n**Journals**\nIEEE Transactions on Fuzzy System\nIEEE Transactions on Emergin Topics in Computational Intelligence\nIEEE Transactions on Systems, Man and Cybernetics: Systems\nNeurocomputing\n\n**Conference**\nThe Third International Conference on Biological Information and Biomedical Engineering (BIBE 2019)\n\n## Movie Recommendation\n\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/DallasBuyer-Club.png\">\n</div>\n\n","source":"about/index.md","raw":"---\ntitle: Biography\ndate: 2019-04-24 12:54:31\n---\n\n## Peng Xu 许鹏\nPostgraduate Student\nSoftware Engineering\nSchool of Digital Media, Jiangnan University\nEmail: dallasbuyer [AT] stu.jiangnan.edu.cn\nWeChat: xu172447385\n\n## Interests\nI am interested in artificial intelligence, transfer learning, multi-view learning, fuzzy machine learning and interpretable machine learning.\n\n## Publications\n**Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning**\n**Peng Xu**, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang\n*IEEE Transactions on Fuzzy System*, 2019. [[PDF]](https://arxiv.org/abs/1904.10683v1)\n\n**Transfer Representation Learning with TSK Fuzzy System**\n**Peng Xu**, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang\n*arXiv:1901.02703*, 2019. [[PDF]](http://export.arxiv.org/abs/1901.02703)\n\n**Multi-view Information-theoretic Co-clustering for Co-occurrence Data**\n**Peng Xu**, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang\n*AAAI (spotlight)*, 2019. [[PDF]](https://arxiv.org/abs/1905.10594#) [[CODE]](https://github.com/DallasBuyer/MVITCC)\n\n**Joint Information Preservation for Heterogeneous Domain Adaptation**\n**Peng Xu**, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang\nTechical Report, 2019. [[PDF]](https://arxiv.org/abs/1905.08924)\n\n**Deep Image Feature Learning with Fuzzy Fules**\nXiang Ma, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\nTechical Report, 2019. [[PDF]](http://export.arxiv.org/abs/1905.10575)\n\n**Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals**\nZhaohong Deng, **Peng Xu**, Lixiao Xie, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Neural Systems and Rehabilitation Engineering*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8395430)\n\n**Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals**\nLixiao Xie, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Cybernetics*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8337847)\n\n\n## Talks\nSpotlight Talk on the Thirty-Third AAAI Conference on Artificial Intelligence, Hawaii, USA, 01/2019\n\n## Reviewer\n\n**Journals**\nIEEE Transactions on Fuzzy System\nIEEE Transactions on Emergin Topics in Computational Intelligence\nIEEE Transactions on Systems, Man and Cybernetics: Systems\nNeurocomputing\n\n**Conference**\nThe Third International Conference on Biological Information and Biomedical Engineering (BIBE 2019)\n\n## Movie Recommendation\n\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/DallasBuyer-Club.png\">\n</div>\n\n","updated":"2019-07-20T06:21:21.075Z","path":"about/index.html","_id":"cjyb46noq0001snad25ves8pq","comments":1,"layout":"page","content":"<h2 id=\"Peng-Xu-许鹏\"><a href=\"#Peng-Xu-许鹏\" class=\"headerlink\" title=\"Peng Xu 许鹏\"></a>Peng Xu 许鹏</h2><p>Postgraduate Student<br>Software Engineering<br>School of Digital Media, Jiangnan University<br>Email: dallasbuyer [AT] stu.jiangnan.edu.cn<br>WeChat: xu172447385</p>\n<h2 id=\"Interests\"><a href=\"#Interests\" class=\"headerlink\" title=\"Interests\"></a>Interests</h2><p>I am interested in artificial intelligence, transfer learning, multi-view learning, fuzzy machine learning and interpretable machine learning.</p>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><p><strong>Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang<br><em>IEEE Transactions on Fuzzy System</em>, 2019. <a href=\"https://arxiv.org/abs/1904.10683v1\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Transfer Representation Learning with TSK Fuzzy System</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang<br><em>arXiv:1901.02703</em>, 2019. <a href=\"http://export.arxiv.org/abs/1901.02703\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Multi-view Information-theoretic Co-clustering for Co-occurrence Data</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang<br><em>AAAI (spotlight)</em>, 2019. <a href=\"https://arxiv.org/abs/1905.10594#\" target=\"_blank\" rel=\"noopener\">[PDF]</a> <a href=\"https://github.com/DallasBuyer/MVITCC\" target=\"_blank\" rel=\"noopener\">[CODE]</a></p>\n<p><strong>Joint Information Preservation for Heterogeneous Domain Adaptation</strong><br><strong>Peng Xu</strong>, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang<br>Techical Report, 2019. <a href=\"https://arxiv.org/abs/1905.08924\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Deep Image Feature Learning with Fuzzy Fules</strong><br>Xiang Ma, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br>Techical Report, 2019. <a href=\"http://export.arxiv.org/abs/1905.10575\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals</strong><br>Zhaohong Deng, <strong>Peng Xu</strong>, Lixiao Xie, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Neural Systems and Rehabilitation Engineering</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8395430\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals</strong><br>Lixiao Xie, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Cybernetics</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8337847\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<h2 id=\"Talks\"><a href=\"#Talks\" class=\"headerlink\" title=\"Talks\"></a>Talks</h2><p>Spotlight Talk on the Thirty-Third AAAI Conference on Artificial Intelligence, Hawaii, USA, 01/2019</p>\n<h2 id=\"Reviewer\"><a href=\"#Reviewer\" class=\"headerlink\" title=\"Reviewer\"></a>Reviewer</h2><p><strong>Journals</strong><br>IEEE Transactions on Fuzzy System<br>IEEE Transactions on Emergin Topics in Computational Intelligence<br>IEEE Transactions on Systems, Man and Cybernetics: Systems<br>Neurocomputing</p>\n<p><strong>Conference</strong><br>The Third International Conference on Biological Information and Biomedical Engineering (BIBE 2019)</p>\n<h2 id=\"Movie-Recommendation\"><a href=\"#Movie-Recommendation\" class=\"headerlink\" title=\"Movie Recommendation\"></a>Movie Recommendation</h2><div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/DallasBuyer-Club.png\"><br></div>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Peng-Xu-许鹏\"><a href=\"#Peng-Xu-许鹏\" class=\"headerlink\" title=\"Peng Xu 许鹏\"></a>Peng Xu 许鹏</h2><p>Postgraduate Student<br>Software Engineering<br>School of Digital Media, Jiangnan University<br>Email: dallasbuyer [AT] stu.jiangnan.edu.cn<br>WeChat: xu172447385</p>\n<h2 id=\"Interests\"><a href=\"#Interests\" class=\"headerlink\" title=\"Interests\"></a>Interests</h2><p>I am interested in artificial intelligence, transfer learning, multi-view learning, fuzzy machine learning and interpretable machine learning.</p>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><p><strong>Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang<br><em>IEEE Transactions on Fuzzy System</em>, 2019. <a href=\"https://arxiv.org/abs/1904.10683v1\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Transfer Representation Learning with TSK Fuzzy System</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang<br><em>arXiv:1901.02703</em>, 2019. <a href=\"http://export.arxiv.org/abs/1901.02703\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Multi-view Information-theoretic Co-clustering for Co-occurrence Data</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang<br><em>AAAI (spotlight)</em>, 2019. <a href=\"https://arxiv.org/abs/1905.10594#\" target=\"_blank\" rel=\"noopener\">[PDF]</a> <a href=\"https://github.com/DallasBuyer/MVITCC\" target=\"_blank\" rel=\"noopener\">[CODE]</a></p>\n<p><strong>Joint Information Preservation for Heterogeneous Domain Adaptation</strong><br><strong>Peng Xu</strong>, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang<br>Techical Report, 2019. <a href=\"https://arxiv.org/abs/1905.08924\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Deep Image Feature Learning with Fuzzy Fules</strong><br>Xiang Ma, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br>Techical Report, 2019. <a href=\"http://export.arxiv.org/abs/1905.10575\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals</strong><br>Zhaohong Deng, <strong>Peng Xu</strong>, Lixiao Xie, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Neural Systems and Rehabilitation Engineering</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8395430\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<p><strong>Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals</strong><br>Lixiao Xie, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Cybernetics</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8337847\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n<h2 id=\"Talks\"><a href=\"#Talks\" class=\"headerlink\" title=\"Talks\"></a>Talks</h2><p>Spotlight Talk on the Thirty-Third AAAI Conference on Artificial Intelligence, Hawaii, USA, 01/2019</p>\n<h2 id=\"Reviewer\"><a href=\"#Reviewer\" class=\"headerlink\" title=\"Reviewer\"></a>Reviewer</h2><p><strong>Journals</strong><br>IEEE Transactions on Fuzzy System<br>IEEE Transactions on Emergin Topics in Computational Intelligence<br>IEEE Transactions on Systems, Man and Cybernetics: Systems<br>Neurocomputing</p>\n<p><strong>Conference</strong><br>The Third International Conference on Biological Information and Biomedical Engineering (BIBE 2019)</p>\n<h2 id=\"Movie-Recommendation\"><a href=\"#Movie-Recommendation\" class=\"headerlink\" title=\"Movie Recommendation\"></a>Movie Recommendation</h2><div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/DallasBuyer-Club.png\"><br></div>\n\n"},{"title":"categories","date":"2019-04-25T10:41:10.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-25 18:41:10\nlayout: categories\n---\n","updated":"2019-04-25T11:22:26.000Z","path":"categories/index.html","comments":1,"_id":"cjyb46nos0003snadm95v5hmc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Publications and Code","date":"2019-04-25T10:41:10.000Z","_content":"\n\n\n1. **Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning**\n**Peng Xu**, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang\n*IEEE Transactions on Fuzzy System*, 2019. [[PDF]](https://arxiv.org/abs/1904.10683v1)\n\n2. **Transfer Representation Learning with TSK Fuzzy System**\n**Peng Xu**, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang\n*arXiv:1901.02703*, 2019. [[PDF]](http://export.arxiv.org/abs/1901.02703)\n\n3. **Multi-view Information-theoretic Co-clustering for Co-occurrence Data**\n**Peng Xu**, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang\n*AAAI (spotlight)*, 2019. [[PDF]](https://arxiv.org/abs/1905.10594#) [[CODE]](https://github.com/DallasBuyer/MVITCC)\n\n4. **Joint Information Preservation for Heterogeneous Domain Adaptation**\n**Peng Xu**, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang\nTechical Report, 2019. [[PDF]](https://arxiv.org/abs/1905.08924)\n\n5. **Deep Image Feature Learning with Fuzzy Fules**\nXiang Ma, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\nTechical Report, 2019. [[PDF]](http://export.arxiv.org/abs/1905.10575)\n\n6. **Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals**\nZhaohong Deng, **Peng Xu**, Lixiao Xie, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Neural Systems and Rehabilitation Engineering*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8395430)\n\n7. **Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals**\nLixiao Xie, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Cybernetics*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8337847)\n\n\n","source":"publications/index.md","raw":"---\ntitle: Publications and Code\ndate: 2019-04-25 18:41:10\n---\n\n\n\n1. **Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning**\n**Peng Xu**, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang\n*IEEE Transactions on Fuzzy System*, 2019. [[PDF]](https://arxiv.org/abs/1904.10683v1)\n\n2. **Transfer Representation Learning with TSK Fuzzy System**\n**Peng Xu**, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang\n*arXiv:1901.02703*, 2019. [[PDF]](http://export.arxiv.org/abs/1901.02703)\n\n3. **Multi-view Information-theoretic Co-clustering for Co-occurrence Data**\n**Peng Xu**, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang\n*AAAI (spotlight)*, 2019. [[PDF]](https://arxiv.org/abs/1905.10594#) [[CODE]](https://github.com/DallasBuyer/MVITCC)\n\n4. **Joint Information Preservation for Heterogeneous Domain Adaptation**\n**Peng Xu**, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang\nTechical Report, 2019. [[PDF]](https://arxiv.org/abs/1905.08924)\n\n5. **Deep Image Feature Learning with Fuzzy Fules**\nXiang Ma, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\nTechical Report, 2019. [[PDF]](http://export.arxiv.org/abs/1905.10575)\n\n6. **Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals**\nZhaohong Deng, **Peng Xu**, Lixiao Xie, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Neural Systems and Rehabilitation Engineering*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8395430)\n\n7. **Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals**\nLixiao Xie, Zhaohong Deng, **Peng Xu**, Kup-Sze Choi, Shitong Wang\n*IEEE Transactions on Cybernetics*, 2018. [[PDF]](https://ieeexplore.ieee.org/document/8337847)\n\n\n","updated":"2019-06-01T12:01:26.000Z","path":"publications/index.html","comments":1,"layout":"page","_id":"cjyb46now0007snadc18hr1tk","content":"<ol>\n<li><p><strong>Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang<br><em>IEEE Transactions on Fuzzy System</em>, 2019. <a href=\"https://arxiv.org/abs/1904.10683v1\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Transfer Representation Learning with TSK Fuzzy System</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang<br><em>arXiv:1901.02703</em>, 2019. <a href=\"http://export.arxiv.org/abs/1901.02703\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Multi-view Information-theoretic Co-clustering for Co-occurrence Data</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang<br><em>AAAI (spotlight)</em>, 2019. <a href=\"https://arxiv.org/abs/1905.10594#\" target=\"_blank\" rel=\"noopener\">[PDF]</a> <a href=\"https://github.com/DallasBuyer/MVITCC\" target=\"_blank\" rel=\"noopener\">[CODE]</a></p>\n</li>\n<li><p><strong>Joint Information Preservation for Heterogeneous Domain Adaptation</strong><br><strong>Peng Xu</strong>, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang<br>Techical Report, 2019. <a href=\"https://arxiv.org/abs/1905.08924\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Deep Image Feature Learning with Fuzzy Fules</strong><br>Xiang Ma, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br>Techical Report, 2019. <a href=\"http://export.arxiv.org/abs/1905.10575\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals</strong><br>Zhaohong Deng, <strong>Peng Xu</strong>, Lixiao Xie, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Neural Systems and Rehabilitation Engineering</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8395430\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals</strong><br>Lixiao Xie, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Cybernetics</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8337847\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p><strong>Concise Fuzzy System Modeling Integrating Soft Subspace Clustering and Sparse Learning</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Chen Cui, Te Zhang, Kup-Sze Choi, Suhang Gu, Shitong Wang<br><em>IEEE Transactions on Fuzzy System</em>, 2019. <a href=\"https://arxiv.org/abs/1904.10683v1\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Transfer Representation Learning with TSK Fuzzy System</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Jun Wang, Qun Zhang,Shitong Wang<br><em>arXiv:1901.02703</em>, 2019. <a href=\"http://export.arxiv.org/abs/1901.02703\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Multi-view Information-theoretic Co-clustering for Co-occurrence Data</strong><br><strong>Peng Xu</strong>, Zhaohong Deng, Kup-Sze Choi, Longbin Cao, Shitong Wang<br><em>AAAI (spotlight)</em>, 2019. <a href=\"https://arxiv.org/abs/1905.10594#\" target=\"_blank\" rel=\"noopener\">[PDF]</a> <a href=\"https://github.com/DallasBuyer/MVITCC\" target=\"_blank\" rel=\"noopener\">[CODE]</a></p>\n</li>\n<li><p><strong>Joint Information Preservation for Heterogeneous Domain Adaptation</strong><br><strong>Peng Xu</strong>, Zhaohon Deng, Kup-Sze Choi, Jun Wang, Shitong Wang<br>Techical Report, 2019. <a href=\"https://arxiv.org/abs/1905.08924\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Deep Image Feature Learning with Fuzzy Fules</strong><br>Xiang Ma, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br>Techical Report, 2019. <a href=\"http://export.arxiv.org/abs/1905.10575\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Transductive Joint-Knowledge-Transfer TSK FS for Recognition of Epileptic EEG Signals</strong><br>Zhaohong Deng, <strong>Peng Xu</strong>, Lixiao Xie, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Neural Systems and Rehabilitation Engineering</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8395430\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n<li><p><strong>Genralized Hidden-Mapping Transductive Transfer Learning for Recognition of Epileptic Electroencephalogram Signals</strong><br>Lixiao Xie, Zhaohong Deng, <strong>Peng Xu</strong>, Kup-Sze Choi, Shitong Wang<br><em>IEEE Transactions on Cybernetics</em>, 2018. <a href=\"https://ieeexplore.ieee.org/document/8337847\" target=\"_blank\" rel=\"noopener\">[PDF]</a></p>\n</li>\n</ol>\n"}],"Post":[{"title":"ARIMA-1 Stationarity and Difference","date":"2019-07-19T01:59:05.000Z","_content":"\nARIMA模型为时间序列预测提供了另外一种方法。在时间序列预测中exponential smoothing和ARIMA是两种最常用的模型，它们对于同一个问题具有互补的优势。Exponential smoothing模型可以描述数据中存在的trend和seasonality，而ARIMA模型可以描述数据中存在的autocorrelations。<!--more-->\n \n\n## 1. Stationarity\n一个stationary时间序列的性质和观察它的时间点无关，也就是它没有trends或者sensonality，因为trend和seasonality会在不同的时间点影响这时间序列的取值。比如white noise就是一个stationary序列，它的性质和你什么时候观察他没有关系。其实一个有这cyclic behaviour(but with no trend or seasonality)的时间序列也是一个stationary序列，这是因为cycles没有固定的长度，我们无法判断一个cycle的峰和谷。\n一般来说，stationary序列就是那些在long-term中没有predictable patterns的序列。下图是一些时间序列，请分析以下它们所属的类型，是不是stationary序列。\n* (a) 连续200天的谷歌股票价格\n* (b) 连续200天的谷歌股票价格的变化\n* (c) 美国每年恶性袭击的案件数\n* (d) 美国独栋别墅的月销量\n* (e) 美国一打鸡蛋的年平均价格\n* (f) 澳大利亚每个月杀猪量的总和\n* (g) 澳大利亚每年捕获猞猁的总量\n* (h) 澳大利亚每个月的啤酒产量\n* (i) 澳大利亚每个月的供电量\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/stationary-1.png\">\n</div>\n\n分析上图中的9个时间序列，很明显图(d),(h),(i)具有很强的季节性seasonality；图(a),(c),(e),(f),(i)具有很明显的趋势trends;图(i)的表现是方差越来越大；所以只剩下(b)和(g)是stationary series。乍一看好像图(g)表现出的cycles会使得它成为non-stationary序列，但是仔细观察发现这种cycles是aperiodic，所以在long-term内，这些cycles是无法预测的。\n\n## 2. Differencing \n在上图中，(a)图是non-stationary，但是(b)图是stationary，这就提供了一种把序列从non-stationary转化到stationary的方式，就是计算连续观测值之间的差异，叫做differencing。Differencing can help stabilise the mean of a time series by removing changes in the level of a time series, and therefore eliminating(or reducing) trend and seasonality.\n使用ACF plot的方式可以有效地判断non-stationary时间序列。对于一个stationary时间序列，ACF will drop to zero relatively quickly while ACF of non-stationary data decreses slowly. 下图是谷歌股票价格和股票价格变化的ACF图。\n\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/acfstationary-1.png\">\n</div>\n则由上述讨论可知每天股票价格的变化是一个随机变量，并前几天没有什么相关性。\n\n## 3. Random walk model\n上面提到的差异序列(differenced series)其实是原始序列的连续观测值之间的差值构成的，所以可以表达成如下形式。\n$$\ny_t^{'}=y_t-y_{t-1}\n$$\n所以对一段长为$T$的序列来讲，它的差异序列的长度只有$T-1$个值。当差异序列是白噪声的时候，原始序列的模型可以用如下方式表达。\n$$\ny_t-y_{t-1}=\\epsilon _t\n$$\n这里$\\epsilon_t$表示白噪声，重新整理上式就得出了random walk随即游走模型。\n$$\ny_t=y_{t-1}+\\epsilon_t\n$$\n随机游走模型在non-stationary序列数据中有着广泛的应用。一般随机游走具有以下特点：\n* long periods of apparent trends up or down\n* sudden and unpredicted changes in direction\n\n使用随机游走模型的预测值等于时间序列的最后一个观测值，因为继续随机游走的时候是unpredictable的，equally to be up or down。所以，随机游走模型underpins **naive forecast method**。一个类似的使得differences有非0均值的模型如下。\n$$\ny_t-t_{t-1}=c+\\epsilon_t \\quad \\text{or} \\quad y_t=c+y_{t-1}+\\epsilon_t\n$$\n这里的$c$是连续观测值之间变化的均值。如果$c$为正数，则平均变化值相对于$y_t$上升了，即$y_t$ will tend to drift upward，否则，$y_t$ will tend to drift downwards。则这时模型类似于**drift method**。\n\n## 4. Second-order differencing\n有时differenced series还是没有表现出stationary的性质，这时候就很有必要再做一次difference以期待得到stationary序列。则有如下二阶差异：\n$$\n\\begin{aligned}\n    y_t^{''} & =y_t^{'}-y_{t-1}^{'} \\\\\n        & = (y_t-y_{t-1})-(y_{t-1}-y_{t-2})\\\\\n        & = y_t-2y_{t-1}+y_{t-2}\n\\end{aligned}\n$$\n这种情况下，$y_t^{''}$有$T-2$个值，在实际应用中，我们几乎不会使用大于second-order的differences。\n\n## 5. Seasonal differencing\n周期性差异指的是当前观测和同周期的前一个观测之间的差异，可以如下表示。\n$$\ny_t^{'}=y_t-y_{t-m}\n$$\n这里$m$表示周期的个数，上式也叫做**lag-m differences**。如果周期性差异数据是白噪声的化则有如下模型。\n$$\ny_t = y_{t-m}+\\epsilon_t\n$$\n则这个模型和**naive forecast method**是一样的。同第4小节中的二阶差异一样，周期性数据也存在二阶差异使其变成stationary数据。\n\n## 6. Unit root test\n决定一个序列是否需要differencing的一种方式是**unit root test**单位根检验，这是一种决定是否应该使用differencing的假设检验方法。已有很多单位根检验方法，在这种假设检验中，空假设是数据是stationary的，如果假设被拒绝，则需要使用differencing方法，如果假设被接受则不需要。","source":"_posts/ARIMA-1 Stationarity and Difference.md","raw":"---\ntitle: ARIMA-1 Stationarity and Difference\ndate: 2019-07-19 09:59:05\ntags: time series models\ncategories: time series models\n---\n\nARIMA模型为时间序列预测提供了另外一种方法。在时间序列预测中exponential smoothing和ARIMA是两种最常用的模型，它们对于同一个问题具有互补的优势。Exponential smoothing模型可以描述数据中存在的trend和seasonality，而ARIMA模型可以描述数据中存在的autocorrelations。<!--more-->\n \n\n## 1. Stationarity\n一个stationary时间序列的性质和观察它的时间点无关，也就是它没有trends或者sensonality，因为trend和seasonality会在不同的时间点影响这时间序列的取值。比如white noise就是一个stationary序列，它的性质和你什么时候观察他没有关系。其实一个有这cyclic behaviour(but with no trend or seasonality)的时间序列也是一个stationary序列，这是因为cycles没有固定的长度，我们无法判断一个cycle的峰和谷。\n一般来说，stationary序列就是那些在long-term中没有predictable patterns的序列。下图是一些时间序列，请分析以下它们所属的类型，是不是stationary序列。\n* (a) 连续200天的谷歌股票价格\n* (b) 连续200天的谷歌股票价格的变化\n* (c) 美国每年恶性袭击的案件数\n* (d) 美国独栋别墅的月销量\n* (e) 美国一打鸡蛋的年平均价格\n* (f) 澳大利亚每个月杀猪量的总和\n* (g) 澳大利亚每年捕获猞猁的总量\n* (h) 澳大利亚每个月的啤酒产量\n* (i) 澳大利亚每个月的供电量\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/stationary-1.png\">\n</div>\n\n分析上图中的9个时间序列，很明显图(d),(h),(i)具有很强的季节性seasonality；图(a),(c),(e),(f),(i)具有很明显的趋势trends;图(i)的表现是方差越来越大；所以只剩下(b)和(g)是stationary series。乍一看好像图(g)表现出的cycles会使得它成为non-stationary序列，但是仔细观察发现这种cycles是aperiodic，所以在long-term内，这些cycles是无法预测的。\n\n## 2. Differencing \n在上图中，(a)图是non-stationary，但是(b)图是stationary，这就提供了一种把序列从non-stationary转化到stationary的方式，就是计算连续观测值之间的差异，叫做differencing。Differencing can help stabilise the mean of a time series by removing changes in the level of a time series, and therefore eliminating(or reducing) trend and seasonality.\n使用ACF plot的方式可以有效地判断non-stationary时间序列。对于一个stationary时间序列，ACF will drop to zero relatively quickly while ACF of non-stationary data decreses slowly. 下图是谷歌股票价格和股票价格变化的ACF图。\n\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/acfstationary-1.png\">\n</div>\n则由上述讨论可知每天股票价格的变化是一个随机变量，并前几天没有什么相关性。\n\n## 3. Random walk model\n上面提到的差异序列(differenced series)其实是原始序列的连续观测值之间的差值构成的，所以可以表达成如下形式。\n$$\ny_t^{'}=y_t-y_{t-1}\n$$\n所以对一段长为$T$的序列来讲，它的差异序列的长度只有$T-1$个值。当差异序列是白噪声的时候，原始序列的模型可以用如下方式表达。\n$$\ny_t-y_{t-1}=\\epsilon _t\n$$\n这里$\\epsilon_t$表示白噪声，重新整理上式就得出了random walk随即游走模型。\n$$\ny_t=y_{t-1}+\\epsilon_t\n$$\n随机游走模型在non-stationary序列数据中有着广泛的应用。一般随机游走具有以下特点：\n* long periods of apparent trends up or down\n* sudden and unpredicted changes in direction\n\n使用随机游走模型的预测值等于时间序列的最后一个观测值，因为继续随机游走的时候是unpredictable的，equally to be up or down。所以，随机游走模型underpins **naive forecast method**。一个类似的使得differences有非0均值的模型如下。\n$$\ny_t-t_{t-1}=c+\\epsilon_t \\quad \\text{or} \\quad y_t=c+y_{t-1}+\\epsilon_t\n$$\n这里的$c$是连续观测值之间变化的均值。如果$c$为正数，则平均变化值相对于$y_t$上升了，即$y_t$ will tend to drift upward，否则，$y_t$ will tend to drift downwards。则这时模型类似于**drift method**。\n\n## 4. Second-order differencing\n有时differenced series还是没有表现出stationary的性质，这时候就很有必要再做一次difference以期待得到stationary序列。则有如下二阶差异：\n$$\n\\begin{aligned}\n    y_t^{''} & =y_t^{'}-y_{t-1}^{'} \\\\\n        & = (y_t-y_{t-1})-(y_{t-1}-y_{t-2})\\\\\n        & = y_t-2y_{t-1}+y_{t-2}\n\\end{aligned}\n$$\n这种情况下，$y_t^{''}$有$T-2$个值，在实际应用中，我们几乎不会使用大于second-order的differences。\n\n## 5. Seasonal differencing\n周期性差异指的是当前观测和同周期的前一个观测之间的差异，可以如下表示。\n$$\ny_t^{'}=y_t-y_{t-m}\n$$\n这里$m$表示周期的个数，上式也叫做**lag-m differences**。如果周期性差异数据是白噪声的化则有如下模型。\n$$\ny_t = y_{t-m}+\\epsilon_t\n$$\n则这个模型和**naive forecast method**是一样的。同第4小节中的二阶差异一样，周期性数据也存在二阶差异使其变成stationary数据。\n\n## 6. Unit root test\n决定一个序列是否需要differencing的一种方式是**unit root test**单位根检验，这是一种决定是否应该使用differencing的假设检验方法。已有很多单位根检验方法，在这种假设检验中，空假设是数据是stationary的，如果假设被拒绝，则需要使用differencing方法，如果假设被接受则不需要。","slug":"ARIMA-1 Stationarity and Difference","published":1,"updated":"2019-07-20T04:39:58.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyb46nom0000snadtxauahcr","content":"<p>ARIMA模型为时间序列预测提供了另外一种方法。在时间序列预测中exponential smoothing和ARIMA是两种最常用的模型，它们对于同一个问题具有互补的优势。Exponential smoothing模型可以描述数据中存在的trend和seasonality，而ARIMA模型可以描述数据中存在的autocorrelations。<a id=\"more\"></a></p>\n<h2 id=\"1-Stationarity\"><a href=\"#1-Stationarity\" class=\"headerlink\" title=\"1. Stationarity\"></a>1. Stationarity</h2><p>一个stationary时间序列的性质和观察它的时间点无关，也就是它没有trends或者sensonality，因为trend和seasonality会在不同的时间点影响这时间序列的取值。比如white noise就是一个stationary序列，它的性质和你什么时候观察他没有关系。其实一个有这cyclic behaviour(but with no trend or seasonality)的时间序列也是一个stationary序列，这是因为cycles没有固定的长度，我们无法判断一个cycle的峰和谷。<br>一般来说，stationary序列就是那些在long-term中没有predictable patterns的序列。下图是一些时间序列，请分析以下它们所属的类型，是不是stationary序列。</p>\n<ul>\n<li>(a) 连续200天的谷歌股票价格</li>\n<li>(b) 连续200天的谷歌股票价格的变化</li>\n<li>(c) 美国每年恶性袭击的案件数</li>\n<li>(d) 美国独栋别墅的月销量</li>\n<li>(e) 美国一打鸡蛋的年平均价格</li>\n<li>(f) 澳大利亚每个月杀猪量的总和</li>\n<li>(g) 澳大利亚每年捕获猞猁的总量</li>\n<li>(h) 澳大利亚每个月的啤酒产量</li>\n<li>(i) 澳大利亚每个月的供电量<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/stationary-1.png\"><br></div>\n\n</li>\n</ul>\n<p>分析上图中的9个时间序列，很明显图(d),(h),(i)具有很强的季节性seasonality；图(a),(c),(e),(f),(i)具有很明显的趋势trends;图(i)的表现是方差越来越大；所以只剩下(b)和(g)是stationary series。乍一看好像图(g)表现出的cycles会使得它成为non-stationary序列，但是仔细观察发现这种cycles是aperiodic，所以在long-term内，这些cycles是无法预测的。</p>\n<h2 id=\"2-Differencing\"><a href=\"#2-Differencing\" class=\"headerlink\" title=\"2. Differencing\"></a>2. Differencing</h2><p>在上图中，(a)图是non-stationary，但是(b)图是stationary，这就提供了一种把序列从non-stationary转化到stationary的方式，就是计算连续观测值之间的差异，叫做differencing。Differencing can help stabilise the mean of a time series by removing changes in the level of a time series, and therefore eliminating(or reducing) trend and seasonality.<br>使用ACF plot的方式可以有效地判断non-stationary时间序列。对于一个stationary时间序列，ACF will drop to zero relatively quickly while ACF of non-stationary data decreses slowly. 下图是谷歌股票价格和股票价格变化的ACF图。</p>\n<p><div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/acfstationary-1.png\"><br></div><br>则由上述讨论可知每天股票价格的变化是一个随机变量，并前几天没有什么相关性。</p>\n<h2 id=\"3-Random-walk-model\"><a href=\"#3-Random-walk-model\" class=\"headerlink\" title=\"3. Random walk model\"></a>3. Random walk model</h2><p>上面提到的差异序列(differenced series)其实是原始序列的连续观测值之间的差值构成的，所以可以表达成如下形式。<br>$$<br>y_t^{‘}=y_t-y_{t-1}<br>$$<br>所以对一段长为$T$的序列来讲，它的差异序列的长度只有$T-1$个值。当差异序列是白噪声的时候，原始序列的模型可以用如下方式表达。<br>$$<br>y_t-y_{t-1}=\\epsilon _t<br>$$<br>这里$\\epsilon_t$表示白噪声，重新整理上式就得出了random walk随即游走模型。<br>$$<br>y_t=y_{t-1}+\\epsilon_t<br>$$<br>随机游走模型在non-stationary序列数据中有着广泛的应用。一般随机游走具有以下特点：</p>\n<ul>\n<li>long periods of apparent trends up or down</li>\n<li>sudden and unpredicted changes in direction</li>\n</ul>\n<p>使用随机游走模型的预测值等于时间序列的最后一个观测值，因为继续随机游走的时候是unpredictable的，equally to be up or down。所以，随机游走模型underpins <strong>naive forecast method</strong>。一个类似的使得differences有非0均值的模型如下。<br>$$<br>y_t-t_{t-1}=c+\\epsilon_t \\quad \\text{or} \\quad y_t=c+y_{t-1}+\\epsilon_t<br>$$<br>这里的$c$是连续观测值之间变化的均值。如果$c$为正数，则平均变化值相对于$y_t$上升了，即$y_t$ will tend to drift upward，否则，$y_t$ will tend to drift downwards。则这时模型类似于<strong>drift method</strong>。</p>\n<h2 id=\"4-Second-order-differencing\"><a href=\"#4-Second-order-differencing\" class=\"headerlink\" title=\"4. Second-order differencing\"></a>4. Second-order differencing</h2><p>有时differenced series还是没有表现出stationary的性质，这时候就很有必要再做一次difference以期待得到stationary序列。则有如下二阶差异：<br>$$<br>\\begin{aligned}<br>    y_t^{‘’} &amp; =y_t^{‘}-y_{t-1}^{‘} \\<br>        &amp; = (y_t-y_{t-1})-(y_{t-1}-y_{t-2})\\<br>        &amp; = y_t-2y_{t-1}+y_{t-2}<br>\\end{aligned}<br>$$<br>这种情况下，$y_t^{‘’}$有$T-2$个值，在实际应用中，我们几乎不会使用大于second-order的differences。</p>\n<h2 id=\"5-Seasonal-differencing\"><a href=\"#5-Seasonal-differencing\" class=\"headerlink\" title=\"5. Seasonal differencing\"></a>5. Seasonal differencing</h2><p>周期性差异指的是当前观测和同周期的前一个观测之间的差异，可以如下表示。<br>$$<br>y_t^{‘}=y_t-y_{t-m}<br>$$<br>这里$m$表示周期的个数，上式也叫做<strong>lag-m differences</strong>。如果周期性差异数据是白噪声的化则有如下模型。<br>$$<br>y_t = y_{t-m}+\\epsilon_t<br>$$<br>则这个模型和<strong>naive forecast method</strong>是一样的。同第4小节中的二阶差异一样，周期性数据也存在二阶差异使其变成stationary数据。</p>\n<h2 id=\"6-Unit-root-test\"><a href=\"#6-Unit-root-test\" class=\"headerlink\" title=\"6. Unit root test\"></a>6. Unit root test</h2><p>决定一个序列是否需要differencing的一种方式是<strong>unit root test</strong>单位根检验，这是一种决定是否应该使用differencing的假设检验方法。已有很多单位根检验方法，在这种假设检验中，空假设是数据是stationary的，如果假设被拒绝，则需要使用differencing方法，如果假设被接受则不需要。</p>\n","site":{"data":{}},"excerpt":"<p>ARIMA模型为时间序列预测提供了另外一种方法。在时间序列预测中exponential smoothing和ARIMA是两种最常用的模型，它们对于同一个问题具有互补的优势。Exponential smoothing模型可以描述数据中存在的trend和seasonality，而ARIMA模型可以描述数据中存在的autocorrelations。","more":"</p>\n<h2 id=\"1-Stationarity\"><a href=\"#1-Stationarity\" class=\"headerlink\" title=\"1. Stationarity\"></a>1. Stationarity</h2><p>一个stationary时间序列的性质和观察它的时间点无关，也就是它没有trends或者sensonality，因为trend和seasonality会在不同的时间点影响这时间序列的取值。比如white noise就是一个stationary序列，它的性质和你什么时候观察他没有关系。其实一个有这cyclic behaviour(but with no trend or seasonality)的时间序列也是一个stationary序列，这是因为cycles没有固定的长度，我们无法判断一个cycle的峰和谷。<br>一般来说，stationary序列就是那些在long-term中没有predictable patterns的序列。下图是一些时间序列，请分析以下它们所属的类型，是不是stationary序列。</p>\n<ul>\n<li>(a) 连续200天的谷歌股票价格</li>\n<li>(b) 连续200天的谷歌股票价格的变化</li>\n<li>(c) 美国每年恶性袭击的案件数</li>\n<li>(d) 美国独栋别墅的月销量</li>\n<li>(e) 美国一打鸡蛋的年平均价格</li>\n<li>(f) 澳大利亚每个月杀猪量的总和</li>\n<li>(g) 澳大利亚每年捕获猞猁的总量</li>\n<li>(h) 澳大利亚每个月的啤酒产量</li>\n<li>(i) 澳大利亚每个月的供电量<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/stationary-1.png\"><br></div>\n\n</li>\n</ul>\n<p>分析上图中的9个时间序列，很明显图(d),(h),(i)具有很强的季节性seasonality；图(a),(c),(e),(f),(i)具有很明显的趋势trends;图(i)的表现是方差越来越大；所以只剩下(b)和(g)是stationary series。乍一看好像图(g)表现出的cycles会使得它成为non-stationary序列，但是仔细观察发现这种cycles是aperiodic，所以在long-term内，这些cycles是无法预测的。</p>\n<h2 id=\"2-Differencing\"><a href=\"#2-Differencing\" class=\"headerlink\" title=\"2. Differencing\"></a>2. Differencing</h2><p>在上图中，(a)图是non-stationary，但是(b)图是stationary，这就提供了一种把序列从non-stationary转化到stationary的方式，就是计算连续观测值之间的差异，叫做differencing。Differencing can help stabilise the mean of a time series by removing changes in the level of a time series, and therefore eliminating(or reducing) trend and seasonality.<br>使用ACF plot的方式可以有效地判断non-stationary时间序列。对于一个stationary时间序列，ACF will drop to zero relatively quickly while ACF of non-stationary data decreses slowly. 下图是谷歌股票价格和股票价格变化的ACF图。</p>\n<p><div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/acfstationary-1.png\"><br></div><br>则由上述讨论可知每天股票价格的变化是一个随机变量，并前几天没有什么相关性。</p>\n<h2 id=\"3-Random-walk-model\"><a href=\"#3-Random-walk-model\" class=\"headerlink\" title=\"3. Random walk model\"></a>3. Random walk model</h2><p>上面提到的差异序列(differenced series)其实是原始序列的连续观测值之间的差值构成的，所以可以表达成如下形式。<br>$$<br>y_t^{‘}=y_t-y_{t-1}<br>$$<br>所以对一段长为$T$的序列来讲，它的差异序列的长度只有$T-1$个值。当差异序列是白噪声的时候，原始序列的模型可以用如下方式表达。<br>$$<br>y_t-y_{t-1}=\\epsilon _t<br>$$<br>这里$\\epsilon_t$表示白噪声，重新整理上式就得出了random walk随即游走模型。<br>$$<br>y_t=y_{t-1}+\\epsilon_t<br>$$<br>随机游走模型在non-stationary序列数据中有着广泛的应用。一般随机游走具有以下特点：</p>\n<ul>\n<li>long periods of apparent trends up or down</li>\n<li>sudden and unpredicted changes in direction</li>\n</ul>\n<p>使用随机游走模型的预测值等于时间序列的最后一个观测值，因为继续随机游走的时候是unpredictable的，equally to be up or down。所以，随机游走模型underpins <strong>naive forecast method</strong>。一个类似的使得differences有非0均值的模型如下。<br>$$<br>y_t-t_{t-1}=c+\\epsilon_t \\quad \\text{or} \\quad y_t=c+y_{t-1}+\\epsilon_t<br>$$<br>这里的$c$是连续观测值之间变化的均值。如果$c$为正数，则平均变化值相对于$y_t$上升了，即$y_t$ will tend to drift upward，否则，$y_t$ will tend to drift downwards。则这时模型类似于<strong>drift method</strong>。</p>\n<h2 id=\"4-Second-order-differencing\"><a href=\"#4-Second-order-differencing\" class=\"headerlink\" title=\"4. Second-order differencing\"></a>4. Second-order differencing</h2><p>有时differenced series还是没有表现出stationary的性质，这时候就很有必要再做一次difference以期待得到stationary序列。则有如下二阶差异：<br>$$<br>\\begin{aligned}<br>    y_t^{‘’} &amp; =y_t^{‘}-y_{t-1}^{‘} \\<br>        &amp; = (y_t-y_{t-1})-(y_{t-1}-y_{t-2})\\<br>        &amp; = y_t-2y_{t-1}+y_{t-2}<br>\\end{aligned}<br>$$<br>这种情况下，$y_t^{‘’}$有$T-2$个值，在实际应用中，我们几乎不会使用大于second-order的differences。</p>\n<h2 id=\"5-Seasonal-differencing\"><a href=\"#5-Seasonal-differencing\" class=\"headerlink\" title=\"5. Seasonal differencing\"></a>5. Seasonal differencing</h2><p>周期性差异指的是当前观测和同周期的前一个观测之间的差异，可以如下表示。<br>$$<br>y_t^{‘}=y_t-y_{t-m}<br>$$<br>这里$m$表示周期的个数，上式也叫做<strong>lag-m differences</strong>。如果周期性差异数据是白噪声的化则有如下模型。<br>$$<br>y_t = y_{t-m}+\\epsilon_t<br>$$<br>则这个模型和<strong>naive forecast method</strong>是一样的。同第4小节中的二阶差异一样，周期性数据也存在二阶差异使其变成stationary数据。</p>\n<h2 id=\"6-Unit-root-test\"><a href=\"#6-Unit-root-test\" class=\"headerlink\" title=\"6. Unit root test\"></a>6. Unit root test</h2><p>决定一个序列是否需要differencing的一种方式是<strong>unit root test</strong>单位根检验，这是一种决定是否应该使用differencing的假设检验方法。已有很多单位根检验方法，在这种假设检验中，空假设是数据是stationary的，如果假设被拒绝，则需要使用differencing方法，如果假设被接受则不需要。</p>"},{"title":"ARIMA-2 Backshift Notation","date":"2019-07-19T06:27:38.000Z","_content":"\n在研究时间序列延迟的时候，后移符号(backshift notation)非常有用，可以用$B$表示后移操作。也有一些文献使用$L$表示lag而不是$B$表示backshift。换句话说，$B$在$y_t$上面的操作 就是将时序数据后移了一个周期，当然两个$B$就是后移了两个周期。<!--more-->\n\n$$\n\\begin{aligned}\nBy_t & = y_{t-1} \\\\\\\\\nB(By_t) & = B^2y_t=y_{t-2}\n\\end{aligned}\n$$\n\n对于monthly数据来说，如果我们想要表示去年同一个月的数据，就可以写成$B^{12}y_t=y_{t-12}$。后移操作对于描述differencing过程也非常的方便，如下。\n$$\ny^{'}_t=y_t-y_{t-1}=y_t-By_t=(1-B)y_t\n$$\n所以由上述式子注意到一阶差分可以表示成$(1-B)$，同样的，二阶差分可以表示成如下形式。\n$$\n\\begin{aligned}\ny_t^{''} & =y_t-2y_{t-1}+y_{t-2} \\\\\\\\\n& =(1-2B+B)y_t \\\\\\\\\n& =(1-B)^2y_t\n\\end{aligned}\n$$\n所以一般来说，一个$dth-order$的差分可以写成如下形式。\n$$\n(1-B)^dy_t\n$$\n后移操作在组合不同的差分计算是非常有用，它可以被当作一个适合于常用代数规则的运算符号。比如，当一个周期性差分紧跟着一个一阶差分时可以表示成如下形式。\n$$\n\\begin{aligned}\n(1-B)(1-B^{m})y_t & =(1-B-B^m+B^{m+1})y_t \\\\\\\\\n                  & =y_t-y_{t-1}-y_{t-m}+y_{t-m-1}\n\\end{aligned}\n$$","source":"_posts/ARIMA-2 Backshift Notation.md","raw":"---\ntitle: ARIMA-2 Backshift Notation\ndate: 2019-07-19 14:27:38\ntags: time series models\ncategories: time series models\n---\n\n在研究时间序列延迟的时候，后移符号(backshift notation)非常有用，可以用$B$表示后移操作。也有一些文献使用$L$表示lag而不是$B$表示backshift。换句话说，$B$在$y_t$上面的操作 就是将时序数据后移了一个周期，当然两个$B$就是后移了两个周期。<!--more-->\n\n$$\n\\begin{aligned}\nBy_t & = y_{t-1} \\\\\\\\\nB(By_t) & = B^2y_t=y_{t-2}\n\\end{aligned}\n$$\n\n对于monthly数据来说，如果我们想要表示去年同一个月的数据，就可以写成$B^{12}y_t=y_{t-12}$。后移操作对于描述differencing过程也非常的方便，如下。\n$$\ny^{'}_t=y_t-y_{t-1}=y_t-By_t=(1-B)y_t\n$$\n所以由上述式子注意到一阶差分可以表示成$(1-B)$，同样的，二阶差分可以表示成如下形式。\n$$\n\\begin{aligned}\ny_t^{''} & =y_t-2y_{t-1}+y_{t-2} \\\\\\\\\n& =(1-2B+B)y_t \\\\\\\\\n& =(1-B)^2y_t\n\\end{aligned}\n$$\n所以一般来说，一个$dth-order$的差分可以写成如下形式。\n$$\n(1-B)^dy_t\n$$\n后移操作在组合不同的差分计算是非常有用，它可以被当作一个适合于常用代数规则的运算符号。比如，当一个周期性差分紧跟着一个一阶差分时可以表示成如下形式。\n$$\n\\begin{aligned}\n(1-B)(1-B^{m})y_t & =(1-B-B^m+B^{m+1})y_t \\\\\\\\\n                  & =y_t-y_{t-1}-y_{t-m}+y_{t-m-1}\n\\end{aligned}\n$$","slug":"ARIMA-2 Backshift Notation","published":1,"updated":"2019-07-20T04:40:09.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyb46nor0002snaduasth06x","content":"<p>在研究时间序列延迟的时候，后移符号(backshift notation)非常有用，可以用$B$表示后移操作。也有一些文献使用$L$表示lag而不是$B$表示backshift。换句话说，$B$在$y_t$上面的操作 就是将时序数据后移了一个周期，当然两个$B$就是后移了两个周期。<a id=\"more\"></a></p>\n<p>$$<br>\\begin{aligned}<br>By_t &amp; = y_{t-1} \\\\<br>B(By_t) &amp; = B^2y_t=y_{t-2}<br>\\end{aligned}<br>$$</p>\n<p>对于monthly数据来说，如果我们想要表示去年同一个月的数据，就可以写成$B^{12}y_t=y_{t-12}$。后移操作对于描述differencing过程也非常的方便，如下。<br>$$<br>y^{‘}_t=y_t-y_{t-1}=y_t-By_t=(1-B)y_t<br>$$<br>所以由上述式子注意到一阶差分可以表示成$(1-B)$，同样的，二阶差分可以表示成如下形式。<br>$$<br>\\begin{aligned}<br>y_t^{‘’} &amp; =y_t-2y_{t-1}+y_{t-2} \\\\<br>&amp; =(1-2B+B)y_t \\\\<br>&amp; =(1-B)^2y_t<br>\\end{aligned}<br>$$<br>所以一般来说，一个$dth-order$的差分可以写成如下形式。<br>$$<br>(1-B)^dy_t<br>$$<br>后移操作在组合不同的差分计算是非常有用，它可以被当作一个适合于常用代数规则的运算符号。比如，当一个周期性差分紧跟着一个一阶差分时可以表示成如下形式。<br>$$<br>\\begin{aligned}<br>(1-B)(1-B^{m})y_t &amp; =(1-B-B^m+B^{m+1})y_t \\\\<br>                  &amp; =y_t-y_{t-1}-y_{t-m}+y_{t-m-1}<br>\\end{aligned}<br>$$</p>\n","site":{"data":{}},"excerpt":"<p>在研究时间序列延迟的时候，后移符号(backshift notation)非常有用，可以用$B$表示后移操作。也有一些文献使用$L$表示lag而不是$B$表示backshift。换句话说，$B$在$y_t$上面的操作 就是将时序数据后移了一个周期，当然两个$B$就是后移了两个周期。","more":"</p>\n<p>$$<br>\\begin{aligned}<br>By_t &amp; = y_{t-1} \\\\<br>B(By_t) &amp; = B^2y_t=y_{t-2}<br>\\end{aligned}<br>$$</p>\n<p>对于monthly数据来说，如果我们想要表示去年同一个月的数据，就可以写成$B^{12}y_t=y_{t-12}$。后移操作对于描述differencing过程也非常的方便，如下。<br>$$<br>y^{‘}_t=y_t-y_{t-1}=y_t-By_t=(1-B)y_t<br>$$<br>所以由上述式子注意到一阶差分可以表示成$(1-B)$，同样的，二阶差分可以表示成如下形式。<br>$$<br>\\begin{aligned}<br>y_t^{‘’} &amp; =y_t-2y_{t-1}+y_{t-2} \\\\<br>&amp; =(1-2B+B)y_t \\\\<br>&amp; =(1-B)^2y_t<br>\\end{aligned}<br>$$<br>所以一般来说，一个$dth-order$的差分可以写成如下形式。<br>$$<br>(1-B)^dy_t<br>$$<br>后移操作在组合不同的差分计算是非常有用，它可以被当作一个适合于常用代数规则的运算符号。比如，当一个周期性差分紧跟着一个一阶差分时可以表示成如下形式。<br>$$<br>\\begin{aligned}<br>(1-B)(1-B^{m})y_t &amp; =(1-B-B^m+B^{m+1})y_t \\\\<br>                  &amp; =y_t-y_{t-1}-y_{t-m}+y_{t-m-1}<br>\\end{aligned}<br>$$</p>"},{"title":"ARIMA-3 Autoregressive Models and Moving Average Models","date":"2019-07-19T14:43:12.000Z","_content":"\n在机器学习常用的回归模型中，我们使用预测变量(predictors)的线性组合来预测感兴趣的变量，而在自回归模型(autoregression)模型中，我们某个变量过去的取值来预测这个变量。所以这里自回归表示用自己预测自己。而与自回归模型不同，移动平均模型(moving average model)是以类似回归的形式使用过去的预测误差进行预测。<!--more-->\n\n## 1. Autoregressive models\n\n则自回归模型可以表示成如下形式：\n$$\ny_t=c+\\phi_1y_{t-1}+\\phi_2y_{t-2}+ \\ldots + \\phi_py_{t-p}+\\epsilon_t\n$$\n这里$\\epsilon_t$表示白噪声，我们把上述模型叫做一个$p$阶的自回归模型，可以表示为**AR(p) model**。\n自回归模型可以极其灵活的处理很多种不同的时间序列模式。如下图所示展示了AR(1)模型和AR(2)模型。通过改变参数$\\phi_1,\\ldots,\\phi_p$可以产生不同的时间序列模型，而误差项$\\epsilon_t$只会影响序列的尺度，不会影响patterns。\n\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/arp-1.png\">\n</div>\n\n上面两个图中，第一个AR(1)模型和第二个AR(2)模型的函数分别为：\n$$\n\\begin{aligned}\nAR(1):\\quad y_t & = 18-0.8y_{t-1}+\\epsilon_t \\\\\\\\\nAR(2):\\quad y_t & = 8+1.3y_{t-1}-0.7y_{t-2}+\\epsilon_t\n\\end{aligned}\n$$\n对于AR(1)模型：\n* 当$\\phi_1=0$的时候，$y_t$等价于白噪声(white noise)\n* 当$\\phi_1=1 \\ \\land \\ c=0$的时候，$y_t$相当于随机游走(random walk)\n* 当$\\phi_1=1 \\ \\land \\ c\\neq0$的时候，，$y_t$相当于带有漂移的随机游走(random walk with drift)\n* 当$\\phi_1<0$的时候，$y_t$会在均值附近震荡(oscillate)\n\n一般来说，为了约束自回归模型为stationary数据，我们可以约束自回归模型的参数。\n* 对于AR(1)模型：$-1<\\phi_1<1$\n* 对于AR(2)模型：$-1<\\phi_2<1,\\phi_1+\\phi_2<1,\\phi_2-\\phi_1<1$\n\n当$p\\geq3$的时候，约束就会变得很复杂了。\n\n## 2. Moving average models\n\n移动平均模型的形式如下：\n$$\ny_t=c+\\epsilon_t+\\theta_1\\epsilon_{t-1}+\\theta_2\\epsilon_{t-2}+\\ldots+\\theta_q\\epsilon_{t-q}\n$$\n这里$\\epsilon_t$是白噪声，我们把这个模型叫做q阶的**MA(q)**模型，当然我们其实无法观测到变量$\\epsilon_t$的取值，所以它不算是通常意义上的回归模型。它知识认为$y_t$的值可以由过去的预测误差值的加权移动平均得到。如下图展示了两个模型MA(1)和MA(2)。\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/maq-1.png\">\n</div>\n\n上图中的两个模型MA(1)和MA(2)分别为:\n$$\n\\begin{aligned}\nMA(1): \\quad y_t &= 20+\\epsilon_t+0.8\\epsilon_{t-1} \\\\\\\\\nMA(2): \\quad y_t &= \\epsilon_t - \\epsilon_{t-1} + 0.8\\epsilon{t-2} \n\\end{aligned}\n$$\n其实任何一个stationary $\\text{AR}(p)$模型都可以表示成一个$\\text{MA}(\\infty)$模型，我们可以推到以下AR(1)模型。\n$$\n\\begin{aligned}\nMA(1): \\quad y_t &= \\phi_1y_{t-1}+\\epsilon_t \\\\\\\\\n&= \\phi_1(\\phi_1y_{t-2}+\\epsilon_{t-1})+\\epsilon_t \\\\\\\\\n&= \\phi_1^2y_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\\\\\\n&= \\phi_1^3y_{t-3}+\\phi_1^2\\epsilon_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\\\\\\n&= etc.\n\\end{aligned}\n$$\n如果$-1<\\phi_1<1$，随着$k$变大，$\\phi_1^k$的值会越变越小，最终我们得到如下公式。\n$$\ny_t=\\epsilon_t+\\phi_1\\epsilon_{t-1}+\\phi_1^2\\epsilon_{t-2}+\\phi_1^3\\epsilon_{t-3}+\\ldots\n$$\n即为一个$\\text{MA}(\\infty)$模型。如果里面的参数$\\phi_1$和$\\phi_2$有满足上面提到的约束，则这个MA模型是可逆的，它可以转化为一个AR模型，也就是我们可以将任何可逆的MA(q)模型，转化成$\\text{AR}(\\infty$)模型，而且我们不仅仅是为了转化，这个过此中也有一些很不错的数学性质。比如我们将一个MA(1)过程，$y_t=\\epsilon_t+\\theta_1\\epsilon_{t-1}$转化成它的相应$\\text{AR}(\\infty)$模型,则有如下性质：\n$$\n\\epsilon_t=\\sum_{k=0}^\\infty(-\\theta)^jy_{t-j}\n$$\n此处未完待续...","source":"_posts/ARIMA-3 Autoregressive model and Moving average models.md","raw":"---\ntitle: ARIMA-3 Autoregressive Models and Moving Average Models\ndate: 2019-07-19 22:43:12\ntags: time series models\ncategories: time series models\n---\n\n在机器学习常用的回归模型中，我们使用预测变量(predictors)的线性组合来预测感兴趣的变量，而在自回归模型(autoregression)模型中，我们某个变量过去的取值来预测这个变量。所以这里自回归表示用自己预测自己。而与自回归模型不同，移动平均模型(moving average model)是以类似回归的形式使用过去的预测误差进行预测。<!--more-->\n\n## 1. Autoregressive models\n\n则自回归模型可以表示成如下形式：\n$$\ny_t=c+\\phi_1y_{t-1}+\\phi_2y_{t-2}+ \\ldots + \\phi_py_{t-p}+\\epsilon_t\n$$\n这里$\\epsilon_t$表示白噪声，我们把上述模型叫做一个$p$阶的自回归模型，可以表示为**AR(p) model**。\n自回归模型可以极其灵活的处理很多种不同的时间序列模式。如下图所示展示了AR(1)模型和AR(2)模型。通过改变参数$\\phi_1,\\ldots,\\phi_p$可以产生不同的时间序列模型，而误差项$\\epsilon_t$只会影响序列的尺度，不会影响patterns。\n\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/arp-1.png\">\n</div>\n\n上面两个图中，第一个AR(1)模型和第二个AR(2)模型的函数分别为：\n$$\n\\begin{aligned}\nAR(1):\\quad y_t & = 18-0.8y_{t-1}+\\epsilon_t \\\\\\\\\nAR(2):\\quad y_t & = 8+1.3y_{t-1}-0.7y_{t-2}+\\epsilon_t\n\\end{aligned}\n$$\n对于AR(1)模型：\n* 当$\\phi_1=0$的时候，$y_t$等价于白噪声(white noise)\n* 当$\\phi_1=1 \\ \\land \\ c=0$的时候，$y_t$相当于随机游走(random walk)\n* 当$\\phi_1=1 \\ \\land \\ c\\neq0$的时候，，$y_t$相当于带有漂移的随机游走(random walk with drift)\n* 当$\\phi_1<0$的时候，$y_t$会在均值附近震荡(oscillate)\n\n一般来说，为了约束自回归模型为stationary数据，我们可以约束自回归模型的参数。\n* 对于AR(1)模型：$-1<\\phi_1<1$\n* 对于AR(2)模型：$-1<\\phi_2<1,\\phi_1+\\phi_2<1,\\phi_2-\\phi_1<1$\n\n当$p\\geq3$的时候，约束就会变得很复杂了。\n\n## 2. Moving average models\n\n移动平均模型的形式如下：\n$$\ny_t=c+\\epsilon_t+\\theta_1\\epsilon_{t-1}+\\theta_2\\epsilon_{t-2}+\\ldots+\\theta_q\\epsilon_{t-q}\n$$\n这里$\\epsilon_t$是白噪声，我们把这个模型叫做q阶的**MA(q)**模型，当然我们其实无法观测到变量$\\epsilon_t$的取值，所以它不算是通常意义上的回归模型。它知识认为$y_t$的值可以由过去的预测误差值的加权移动平均得到。如下图展示了两个模型MA(1)和MA(2)。\n<div align=center>\n<img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/maq-1.png\">\n</div>\n\n上图中的两个模型MA(1)和MA(2)分别为:\n$$\n\\begin{aligned}\nMA(1): \\quad y_t &= 20+\\epsilon_t+0.8\\epsilon_{t-1} \\\\\\\\\nMA(2): \\quad y_t &= \\epsilon_t - \\epsilon_{t-1} + 0.8\\epsilon{t-2} \n\\end{aligned}\n$$\n其实任何一个stationary $\\text{AR}(p)$模型都可以表示成一个$\\text{MA}(\\infty)$模型，我们可以推到以下AR(1)模型。\n$$\n\\begin{aligned}\nMA(1): \\quad y_t &= \\phi_1y_{t-1}+\\epsilon_t \\\\\\\\\n&= \\phi_1(\\phi_1y_{t-2}+\\epsilon_{t-1})+\\epsilon_t \\\\\\\\\n&= \\phi_1^2y_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\\\\\\n&= \\phi_1^3y_{t-3}+\\phi_1^2\\epsilon_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\\\\\\n&= etc.\n\\end{aligned}\n$$\n如果$-1<\\phi_1<1$，随着$k$变大，$\\phi_1^k$的值会越变越小，最终我们得到如下公式。\n$$\ny_t=\\epsilon_t+\\phi_1\\epsilon_{t-1}+\\phi_1^2\\epsilon_{t-2}+\\phi_1^3\\epsilon_{t-3}+\\ldots\n$$\n即为一个$\\text{MA}(\\infty)$模型。如果里面的参数$\\phi_1$和$\\phi_2$有满足上面提到的约束，则这个MA模型是可逆的，它可以转化为一个AR模型，也就是我们可以将任何可逆的MA(q)模型，转化成$\\text{AR}(\\infty$)模型，而且我们不仅仅是为了转化，这个过此中也有一些很不错的数学性质。比如我们将一个MA(1)过程，$y_t=\\epsilon_t+\\theta_1\\epsilon_{t-1}$转化成它的相应$\\text{AR}(\\infty)$模型,则有如下性质：\n$$\n\\epsilon_t=\\sum_{k=0}^\\infty(-\\theta)^jy_{t-j}\n$$\n此处未完待续...","slug":"ARIMA-3 Autoregressive model and Moving average models","published":1,"updated":"2019-07-20T05:44:48.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyb46nov0006snadbjp35x4w","content":"<p>在机器学习常用的回归模型中，我们使用预测变量(predictors)的线性组合来预测感兴趣的变量，而在自回归模型(autoregression)模型中，我们某个变量过去的取值来预测这个变量。所以这里自回归表示用自己预测自己。而与自回归模型不同，移动平均模型(moving average model)是以类似回归的形式使用过去的预测误差进行预测。<a id=\"more\"></a></p>\n<h2 id=\"1-Autoregressive-models\"><a href=\"#1-Autoregressive-models\" class=\"headerlink\" title=\"1. Autoregressive models\"></a>1. Autoregressive models</h2><p>则自回归模型可以表示成如下形式：<br>$$<br>y_t=c+\\phi_1y_{t-1}+\\phi_2y_{t-2}+ \\ldots + \\phi_py_{t-p}+\\epsilon_t<br>$$<br>这里$\\epsilon_t$表示白噪声，我们把上述模型叫做一个$p$阶的自回归模型，可以表示为<strong>AR(p) model</strong>。<br>自回归模型可以极其灵活的处理很多种不同的时间序列模式。如下图所示展示了AR(1)模型和AR(2)模型。通过改变参数$\\phi_1,\\ldots,\\phi_p$可以产生不同的时间序列模型，而误差项$\\epsilon_t$只会影响序列的尺度，不会影响patterns。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/arp-1.png\"><br></div>\n\n<p>上面两个图中，第一个AR(1)模型和第二个AR(2)模型的函数分别为：<br>$$<br>\\begin{aligned}<br>AR(1):\\quad y_t &amp; = 18-0.8y_{t-1}+\\epsilon_t \\\\<br>AR(2):\\quad y_t &amp; = 8+1.3y_{t-1}-0.7y_{t-2}+\\epsilon_t<br>\\end{aligned}<br>$$<br>对于AR(1)模型：</p>\n<ul>\n<li>当$\\phi_1=0$的时候，$y_t$等价于白噪声(white noise)</li>\n<li>当$\\phi_1=1 \\ \\land \\ c=0$的时候，$y_t$相当于随机游走(random walk)</li>\n<li>当$\\phi_1=1 \\ \\land \\ c\\neq0$的时候，，$y_t$相当于带有漂移的随机游走(random walk with drift)</li>\n<li>当$\\phi_1&lt;0$的时候，$y_t$会在均值附近震荡(oscillate)</li>\n</ul>\n<p>一般来说，为了约束自回归模型为stationary数据，我们可以约束自回归模型的参数。</p>\n<ul>\n<li>对于AR(1)模型：$-1&lt;\\phi_1&lt;1$</li>\n<li>对于AR(2)模型：$-1&lt;\\phi_2&lt;1,\\phi_1+\\phi_2&lt;1,\\phi_2-\\phi_1&lt;1$</li>\n</ul>\n<p>当$p\\geq3$的时候，约束就会变得很复杂了。</p>\n<h2 id=\"2-Moving-average-models\"><a href=\"#2-Moving-average-models\" class=\"headerlink\" title=\"2. Moving average models\"></a>2. Moving average models</h2><p>移动平均模型的形式如下：<br>$$<br>y_t=c+\\epsilon_t+\\theta_1\\epsilon_{t-1}+\\theta_2\\epsilon_{t-2}+\\ldots+\\theta_q\\epsilon_{t-q}<br>$$<br>这里$\\epsilon_t$是白噪声，我们把这个模型叫做q阶的<strong>MA(q)</strong>模型，当然我们其实无法观测到变量$\\epsilon_t$的取值，所以它不算是通常意义上的回归模型。它知识认为$y_t$的值可以由过去的预测误差值的加权移动平均得到。如下图展示了两个模型MA(1)和MA(2)。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/maq-1.png\"><br></div>\n\n<p>上图中的两个模型MA(1)和MA(2)分别为:<br>$$<br>\\begin{aligned}<br>MA(1): \\quad y_t &amp;= 20+\\epsilon_t+0.8\\epsilon_{t-1} \\\\<br>MA(2): \\quad y_t &amp;= \\epsilon_t - \\epsilon_{t-1} + 0.8\\epsilon{t-2}<br>\\end{aligned}<br>$$<br>其实任何一个stationary $\\text{AR}(p)$模型都可以表示成一个$\\text{MA}(\\infty)$模型，我们可以推到以下AR(1)模型。<br>$$<br>\\begin{aligned}<br>MA(1): \\quad y_t &amp;= \\phi_1y_{t-1}+\\epsilon_t \\\\<br>&amp;= \\phi_1(\\phi_1y_{t-2}+\\epsilon_{t-1})+\\epsilon_t \\\\<br>&amp;= \\phi_1^2y_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\<br>&amp;= \\phi_1^3y_{t-3}+\\phi_1^2\\epsilon_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\<br>&amp;= etc.<br>\\end{aligned}<br>$$<br>如果$-1&lt;\\phi_1&lt;1$，随着$k$变大，$\\phi_1^k$的值会越变越小，最终我们得到如下公式。<br>$$<br>y_t=\\epsilon_t+\\phi_1\\epsilon_{t-1}+\\phi_1^2\\epsilon_{t-2}+\\phi_1^3\\epsilon_{t-3}+\\ldots<br>$$<br>即为一个$\\text{MA}(\\infty)$模型。如果里面的参数$\\phi_1$和$\\phi_2$有满足上面提到的约束，则这个MA模型是可逆的，它可以转化为一个AR模型，也就是我们可以将任何可逆的MA(q)模型，转化成$\\text{AR}(\\infty$)模型，而且我们不仅仅是为了转化，这个过此中也有一些很不错的数学性质。比如我们将一个MA(1)过程，$y_t=\\epsilon_t+\\theta_1\\epsilon_{t-1}$转化成它的相应$\\text{AR}(\\infty)$模型,则有如下性质：<br>$$<br>\\epsilon_t=\\sum_{k=0}^\\infty(-\\theta)^jy_{t-j}<br>$$<br>此处未完待续…</p>\n","site":{"data":{}},"excerpt":"<p>在机器学习常用的回归模型中，我们使用预测变量(predictors)的线性组合来预测感兴趣的变量，而在自回归模型(autoregression)模型中，我们某个变量过去的取值来预测这个变量。所以这里自回归表示用自己预测自己。而与自回归模型不同，移动平均模型(moving average model)是以类似回归的形式使用过去的预测误差进行预测。","more":"</p>\n<h2 id=\"1-Autoregressive-models\"><a href=\"#1-Autoregressive-models\" class=\"headerlink\" title=\"1. Autoregressive models\"></a>1. Autoregressive models</h2><p>则自回归模型可以表示成如下形式：<br>$$<br>y_t=c+\\phi_1y_{t-1}+\\phi_2y_{t-2}+ \\ldots + \\phi_py_{t-p}+\\epsilon_t<br>$$<br>这里$\\epsilon_t$表示白噪声，我们把上述模型叫做一个$p$阶的自回归模型，可以表示为<strong>AR(p) model</strong>。<br>自回归模型可以极其灵活的处理很多种不同的时间序列模式。如下图所示展示了AR(1)模型和AR(2)模型。通过改变参数$\\phi_1,\\ldots,\\phi_p$可以产生不同的时间序列模型，而误差项$\\epsilon_t$只会影响序列的尺度，不会影响patterns。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/arp-1.png\"><br></div>\n\n<p>上面两个图中，第一个AR(1)模型和第二个AR(2)模型的函数分别为：<br>$$<br>\\begin{aligned}<br>AR(1):\\quad y_t &amp; = 18-0.8y_{t-1}+\\epsilon_t \\\\<br>AR(2):\\quad y_t &amp; = 8+1.3y_{t-1}-0.7y_{t-2}+\\epsilon_t<br>\\end{aligned}<br>$$<br>对于AR(1)模型：</p>\n<ul>\n<li>当$\\phi_1=0$的时候，$y_t$等价于白噪声(white noise)</li>\n<li>当$\\phi_1=1 \\ \\land \\ c=0$的时候，$y_t$相当于随机游走(random walk)</li>\n<li>当$\\phi_1=1 \\ \\land \\ c\\neq0$的时候，，$y_t$相当于带有漂移的随机游走(random walk with drift)</li>\n<li>当$\\phi_1&lt;0$的时候，$y_t$会在均值附近震荡(oscillate)</li>\n</ul>\n<p>一般来说，为了约束自回归模型为stationary数据，我们可以约束自回归模型的参数。</p>\n<ul>\n<li>对于AR(1)模型：$-1&lt;\\phi_1&lt;1$</li>\n<li>对于AR(2)模型：$-1&lt;\\phi_2&lt;1,\\phi_1+\\phi_2&lt;1,\\phi_2-\\phi_1&lt;1$</li>\n</ul>\n<p>当$p\\geq3$的时候，约束就会变得很复杂了。</p>\n<h2 id=\"2-Moving-average-models\"><a href=\"#2-Moving-average-models\" class=\"headerlink\" title=\"2. Moving average models\"></a>2. Moving average models</h2><p>移动平均模型的形式如下：<br>$$<br>y_t=c+\\epsilon_t+\\theta_1\\epsilon_{t-1}+\\theta_2\\epsilon_{t-2}+\\ldots+\\theta_q\\epsilon_{t-q}<br>$$<br>这里$\\epsilon_t$是白噪声，我们把这个模型叫做q阶的<strong>MA(q)</strong>模型，当然我们其实无法观测到变量$\\epsilon_t$的取值，所以它不算是通常意义上的回归模型。它知识认为$y_t$的值可以由过去的预测误差值的加权移动平均得到。如下图展示了两个模型MA(1)和MA(2)。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/DallasBuyer/blog-photos/master/maq-1.png\"><br></div>\n\n<p>上图中的两个模型MA(1)和MA(2)分别为:<br>$$<br>\\begin{aligned}<br>MA(1): \\quad y_t &amp;= 20+\\epsilon_t+0.8\\epsilon_{t-1} \\\\<br>MA(2): \\quad y_t &amp;= \\epsilon_t - \\epsilon_{t-1} + 0.8\\epsilon{t-2}<br>\\end{aligned}<br>$$<br>其实任何一个stationary $\\text{AR}(p)$模型都可以表示成一个$\\text{MA}(\\infty)$模型，我们可以推到以下AR(1)模型。<br>$$<br>\\begin{aligned}<br>MA(1): \\quad y_t &amp;= \\phi_1y_{t-1}+\\epsilon_t \\\\<br>&amp;= \\phi_1(\\phi_1y_{t-2}+\\epsilon_{t-1})+\\epsilon_t \\\\<br>&amp;= \\phi_1^2y_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\<br>&amp;= \\phi_1^3y_{t-3}+\\phi_1^2\\epsilon_{t-2}+\\phi_1\\epsilon_{t-1}+\\epsilon_t \\\\<br>&amp;= etc.<br>\\end{aligned}<br>$$<br>如果$-1&lt;\\phi_1&lt;1$，随着$k$变大，$\\phi_1^k$的值会越变越小，最终我们得到如下公式。<br>$$<br>y_t=\\epsilon_t+\\phi_1\\epsilon_{t-1}+\\phi_1^2\\epsilon_{t-2}+\\phi_1^3\\epsilon_{t-3}+\\ldots<br>$$<br>即为一个$\\text{MA}(\\infty)$模型。如果里面的参数$\\phi_1$和$\\phi_2$有满足上面提到的约束，则这个MA模型是可逆的，它可以转化为一个AR模型，也就是我们可以将任何可逆的MA(q)模型，转化成$\\text{AR}(\\infty$)模型，而且我们不仅仅是为了转化，这个过此中也有一些很不错的数学性质。比如我们将一个MA(1)过程，$y_t=\\epsilon_t+\\theta_1\\epsilon_{t-1}$转化成它的相应$\\text{AR}(\\infty)$模型,则有如下性质：<br>$$<br>\\epsilon_t=\\sum_{k=0}^\\infty(-\\theta)^jy_{t-j}<br>$$<br>此处未完待续…</p>"},{"title":"Overview of Forecasting-Principles and Practice","date":"2019-07-18T06:56:13.000Z","_content":"\n最近开始学习一些有关时间序列模型的内容，在此记录下来。此系列博客主要根据一本在线电子书的内容整理而来，为了目的是记录自己的学习历程，让自己的印象更加深刻。这是这本书的[网页连接](https://www.otexts.org/fpp)。\n这本数的题目叫做Forecasting:Principles and Practice，原来自己接触的大部分内容都属于机器学习，无非就是两大任务Prediction和Regreesion，而这里的Forecasting本人理解更倾向于是对时间序列进行预测，即预测未来某个时候挥发生的事情，而不是像分类和回归一样针对某个样本判断其类别或者是取值。<!--more-->\n\n\n## 1. What can be forecast?\n其实forecast有很多场景，比如预测未来5年整个国家需要的用电量，这会决定国家对于发电厂等基础设备的投资建设；比如预测某个公司下周客服中心的呼叫量，这会决定这个公司应该招收多少客服人员；再比如预测股市的走势以决定怎么投资，预测电商网站的销量以决定需要怎么调整供应链等等。这些场景都有一个共性的问题就是它们所产生的数据具有时序性。而一个事件的可预测性一般由以下几点决定：\n\n* 我们是否充分理解导致预测结果的因素\n* 我们能够获取多少以往的数据\n* 预测是否会影响我们想要预测的事情\n\n比如我们要预测用电量的话应该比较容易，因为首先我们有大量的数据，其次我们很理解是什么因素导致了用电量的变化，比如气温，节假日，经济环境等。但是想要预测汇率可能就有些困难了，因为我们虽然有大量的数据，但是我们不知道有哪些确定性的因素会影响汇率的变化。在forecasting中，很重要的一点是我们要知道什么时间我们能够精准的预测，什么时候预测的结果比投硬币要好。好的预测模型通常能够捕获历史数据中的patterns和relationships，而不是简单的复制过去发生的事情。我这里的关键就是我们采用什么样的模型能够把历史数据中的一些噪声给去掉，而提取出那些有效的patterns和relationships，并且根据未来发生事情的factors或者partial pattern来预测它的最终结果。\n\n## 2. Forecasting, planning and goals\n其实forecasting在商业中是一个很常见的统计学任务，它可以为未来的产品规划，物流和人事，提供一个长期的战略计划。但是，在商业环境中forecasting一般完成的比较差劲而且还容易和另外两个内容混淆，就是planning和goals。\n\n* Forecasting: 是用已知的信息去尽可能准确去预测未来，这些已知信息包含historical data和knowledge of any future events that might impact the forecasts(factors)。\n* Goals: 目标是你想要它发生的事情，这里不涉及计划或者你的预测，只是你定的一个方向，能否实现，或者怎么实现都合目标无关。\n* Planning: 而计划就是为Forecasting和Goals负责的，计划就涉及根据预测来采取合适的行动从而让你的目标达成。\n\nForecasting是管理的决策行动中很关键的一部分，它为决策提供了根据，一般来说预测分为三类\n* Short-term forecasts: scheduling of personnel, production and transportation.\n* Medium-term forecasts: future resource requirements, such as raw materials, hire personnel, or buy machinery and equipment.\n* Long-term forecasts:strategic planning, including market opportunities, environmental factors and internal resources.\n\n## 3. Determining what to forecast\n我们做预测的时候首先要清楚的就是预测什么，当面对很多历史数据时，要先根据商业环境和需求明确预测目的\n\n* every product line, or for groups of products?\n* every sales outlet, or for outlets grouped by region, or only for total sales?\n* weekly data, monthly data or annual data?\n\n在确定的需要预测是什么之后紧接着的问题就是how frequent，我们需要每天更新预测数据吗，还是每周，每个月？在知道了这些之后才开始怎么预测的问题，就涉及到了methods和data。\n\n## 4. Forecasting data and methods\n预测方法的选择取决于可获取的数据，如果我们无法获取到数据，那么可以采用**qualitative forecasting(also known as judgmental forecasting)**方法。而当以下条件满足时我们可以采用**quantitative forecasting**方法。\n* numerical information about the past is available;\n* it is reasonabe to assume that some aspects of the past patterns will continue into the future.\n\n有很多quantitative forecasting方法可以采用，一般来说大部分的quantitative prediction问题要么使用series data(collected at regular intervals over time)，要么使用cross-sectional data(collected at a single point in time)。而本书关注于time series domain。\n\n### 4.1. Time series forecasting\n下面是一些例子：\n* Daily IBM stock prices\n* Monthly rainfall\n* Quarterly sales results for Amazon\n* Annual Google profits\n\n本书只关注于一些固定区间时间长度的时间序列，比如hourly, daily, weekly, monthly, quarterly和annually。不关注irregularly spaced time series。\n最简单的时间序列预测方法就是仅仅根据以往的时序数据来预测未来的时序数据，而不去考虑导致最终结果的因素。常见的用于预测的时间序列模型包括**decomposition models, exponential smoothing models and ARIMA models**。\n\n### 4.2. Predictor variables and time series forecasting\n一般来说，预测变量(predictor variables)在时间序列预测中很有效，假设我们现在想预测某个区域夏季一个小时的供电量，可以采用以下模型。\n$$\n\\mathrm{ED} = f(\\mathrm{current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error}).\n$$\n其实上述关系也不完全正确，因为供电量中总有一些变化是无法用上述预测变量来解释的，而最右侧的$\\mathrm{error}$项就可以代表随机波动和那些没有被包含到模型中的其他相关变量。我们可以叫上述为**expanatory model**，因为它可以帮助解释是什么引起了供电量需求的变化。\n因为随着时间变化供电量可以形成一个时间序列，所以我们也可以用一个如下的**time series model**来预测。\n$$\n\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, ED_{t-1},ED_{t-2}, ED_{t-3}, \\ldots,error})\n$$\n这里$t$表示当前一个小时，$t+1$表示下一个小时，$t-1$表示前一个小时。这里只采用了过去的时序数据，而没有外部变量。同样的，这里的$\\mathrm{error}$表示一些随机波动和没有包含到模型里面的相关变量。当然也有第三种模型结合前两种，可以叫做混合模型。\n$$\n\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error})\n$$\n这类模型也叫做**dynamic regression model, panel data models, longitudinal models, transfer functions models, linear system models**。\n\n## 5. The basic steps in a forecasting task\n\n1. Problem definition\n2. Gathering information\n3. Preliminary(exploratory analysis)\n4. Choosing and fitting models\n5. Using and evaluating a forecasting model","source":"_posts/overview: time series models.md","raw":"---\ntitle: Overview of Forecasting-Principles and Practice\ndate: 2019-07-18 14:56:13\ntags: time series models\ncategories: time series models\n---\n\n最近开始学习一些有关时间序列模型的内容，在此记录下来。此系列博客主要根据一本在线电子书的内容整理而来，为了目的是记录自己的学习历程，让自己的印象更加深刻。这是这本书的[网页连接](https://www.otexts.org/fpp)。\n这本数的题目叫做Forecasting:Principles and Practice，原来自己接触的大部分内容都属于机器学习，无非就是两大任务Prediction和Regreesion，而这里的Forecasting本人理解更倾向于是对时间序列进行预测，即预测未来某个时候挥发生的事情，而不是像分类和回归一样针对某个样本判断其类别或者是取值。<!--more-->\n\n\n## 1. What can be forecast?\n其实forecast有很多场景，比如预测未来5年整个国家需要的用电量，这会决定国家对于发电厂等基础设备的投资建设；比如预测某个公司下周客服中心的呼叫量，这会决定这个公司应该招收多少客服人员；再比如预测股市的走势以决定怎么投资，预测电商网站的销量以决定需要怎么调整供应链等等。这些场景都有一个共性的问题就是它们所产生的数据具有时序性。而一个事件的可预测性一般由以下几点决定：\n\n* 我们是否充分理解导致预测结果的因素\n* 我们能够获取多少以往的数据\n* 预测是否会影响我们想要预测的事情\n\n比如我们要预测用电量的话应该比较容易，因为首先我们有大量的数据，其次我们很理解是什么因素导致了用电量的变化，比如气温，节假日，经济环境等。但是想要预测汇率可能就有些困难了，因为我们虽然有大量的数据，但是我们不知道有哪些确定性的因素会影响汇率的变化。在forecasting中，很重要的一点是我们要知道什么时间我们能够精准的预测，什么时候预测的结果比投硬币要好。好的预测模型通常能够捕获历史数据中的patterns和relationships，而不是简单的复制过去发生的事情。我这里的关键就是我们采用什么样的模型能够把历史数据中的一些噪声给去掉，而提取出那些有效的patterns和relationships，并且根据未来发生事情的factors或者partial pattern来预测它的最终结果。\n\n## 2. Forecasting, planning and goals\n其实forecasting在商业中是一个很常见的统计学任务，它可以为未来的产品规划，物流和人事，提供一个长期的战略计划。但是，在商业环境中forecasting一般完成的比较差劲而且还容易和另外两个内容混淆，就是planning和goals。\n\n* Forecasting: 是用已知的信息去尽可能准确去预测未来，这些已知信息包含historical data和knowledge of any future events that might impact the forecasts(factors)。\n* Goals: 目标是你想要它发生的事情，这里不涉及计划或者你的预测，只是你定的一个方向，能否实现，或者怎么实现都合目标无关。\n* Planning: 而计划就是为Forecasting和Goals负责的，计划就涉及根据预测来采取合适的行动从而让你的目标达成。\n\nForecasting是管理的决策行动中很关键的一部分，它为决策提供了根据，一般来说预测分为三类\n* Short-term forecasts: scheduling of personnel, production and transportation.\n* Medium-term forecasts: future resource requirements, such as raw materials, hire personnel, or buy machinery and equipment.\n* Long-term forecasts:strategic planning, including market opportunities, environmental factors and internal resources.\n\n## 3. Determining what to forecast\n我们做预测的时候首先要清楚的就是预测什么，当面对很多历史数据时，要先根据商业环境和需求明确预测目的\n\n* every product line, or for groups of products?\n* every sales outlet, or for outlets grouped by region, or only for total sales?\n* weekly data, monthly data or annual data?\n\n在确定的需要预测是什么之后紧接着的问题就是how frequent，我们需要每天更新预测数据吗，还是每周，每个月？在知道了这些之后才开始怎么预测的问题，就涉及到了methods和data。\n\n## 4. Forecasting data and methods\n预测方法的选择取决于可获取的数据，如果我们无法获取到数据，那么可以采用**qualitative forecasting(also known as judgmental forecasting)**方法。而当以下条件满足时我们可以采用**quantitative forecasting**方法。\n* numerical information about the past is available;\n* it is reasonabe to assume that some aspects of the past patterns will continue into the future.\n\n有很多quantitative forecasting方法可以采用，一般来说大部分的quantitative prediction问题要么使用series data(collected at regular intervals over time)，要么使用cross-sectional data(collected at a single point in time)。而本书关注于time series domain。\n\n### 4.1. Time series forecasting\n下面是一些例子：\n* Daily IBM stock prices\n* Monthly rainfall\n* Quarterly sales results for Amazon\n* Annual Google profits\n\n本书只关注于一些固定区间时间长度的时间序列，比如hourly, daily, weekly, monthly, quarterly和annually。不关注irregularly spaced time series。\n最简单的时间序列预测方法就是仅仅根据以往的时序数据来预测未来的时序数据，而不去考虑导致最终结果的因素。常见的用于预测的时间序列模型包括**decomposition models, exponential smoothing models and ARIMA models**。\n\n### 4.2. Predictor variables and time series forecasting\n一般来说，预测变量(predictor variables)在时间序列预测中很有效，假设我们现在想预测某个区域夏季一个小时的供电量，可以采用以下模型。\n$$\n\\mathrm{ED} = f(\\mathrm{current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error}).\n$$\n其实上述关系也不完全正确，因为供电量中总有一些变化是无法用上述预测变量来解释的，而最右侧的$\\mathrm{error}$项就可以代表随机波动和那些没有被包含到模型中的其他相关变量。我们可以叫上述为**expanatory model**，因为它可以帮助解释是什么引起了供电量需求的变化。\n因为随着时间变化供电量可以形成一个时间序列，所以我们也可以用一个如下的**time series model**来预测。\n$$\n\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, ED_{t-1},ED_{t-2}, ED_{t-3}, \\ldots,error})\n$$\n这里$t$表示当前一个小时，$t+1$表示下一个小时，$t-1$表示前一个小时。这里只采用了过去的时序数据，而没有外部变量。同样的，这里的$\\mathrm{error}$表示一些随机波动和没有包含到模型里面的相关变量。当然也有第三种模型结合前两种，可以叫做混合模型。\n$$\n\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error})\n$$\n这类模型也叫做**dynamic regression model, panel data models, longitudinal models, transfer functions models, linear system models**。\n\n## 5. The basic steps in a forecasting task\n\n1. Problem definition\n2. Gathering information\n3. Preliminary(exploratory analysis)\n4. Choosing and fitting models\n5. Using and evaluating a forecasting model","slug":"overview: time series models","published":1,"updated":"2019-07-20T04:39:19.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyb46now0008snadnhahhlno","content":"<p>最近开始学习一些有关时间序列模型的内容，在此记录下来。此系列博客主要根据一本在线电子书的内容整理而来，为了目的是记录自己的学习历程，让自己的印象更加深刻。这是这本书的<a href=\"https://www.otexts.org/fpp\" target=\"_blank\" rel=\"noopener\">网页连接</a>。<br>这本数的题目叫做Forecasting:Principles and Practice，原来自己接触的大部分内容都属于机器学习，无非就是两大任务Prediction和Regreesion，而这里的Forecasting本人理解更倾向于是对时间序列进行预测，即预测未来某个时候挥发生的事情，而不是像分类和回归一样针对某个样本判断其类别或者是取值。<a id=\"more\"></a></p>\n<h2 id=\"1-What-can-be-forecast\"><a href=\"#1-What-can-be-forecast\" class=\"headerlink\" title=\"1. What can be forecast?\"></a>1. What can be forecast?</h2><p>其实forecast有很多场景，比如预测未来5年整个国家需要的用电量，这会决定国家对于发电厂等基础设备的投资建设；比如预测某个公司下周客服中心的呼叫量，这会决定这个公司应该招收多少客服人员；再比如预测股市的走势以决定怎么投资，预测电商网站的销量以决定需要怎么调整供应链等等。这些场景都有一个共性的问题就是它们所产生的数据具有时序性。而一个事件的可预测性一般由以下几点决定：</p>\n<ul>\n<li>我们是否充分理解导致预测结果的因素</li>\n<li>我们能够获取多少以往的数据</li>\n<li>预测是否会影响我们想要预测的事情</li>\n</ul>\n<p>比如我们要预测用电量的话应该比较容易，因为首先我们有大量的数据，其次我们很理解是什么因素导致了用电量的变化，比如气温，节假日，经济环境等。但是想要预测汇率可能就有些困难了，因为我们虽然有大量的数据，但是我们不知道有哪些确定性的因素会影响汇率的变化。在forecasting中，很重要的一点是我们要知道什么时间我们能够精准的预测，什么时候预测的结果比投硬币要好。好的预测模型通常能够捕获历史数据中的patterns和relationships，而不是简单的复制过去发生的事情。我这里的关键就是我们采用什么样的模型能够把历史数据中的一些噪声给去掉，而提取出那些有效的patterns和relationships，并且根据未来发生事情的factors或者partial pattern来预测它的最终结果。</p>\n<h2 id=\"2-Forecasting-planning-and-goals\"><a href=\"#2-Forecasting-planning-and-goals\" class=\"headerlink\" title=\"2. Forecasting, planning and goals\"></a>2. Forecasting, planning and goals</h2><p>其实forecasting在商业中是一个很常见的统计学任务，它可以为未来的产品规划，物流和人事，提供一个长期的战略计划。但是，在商业环境中forecasting一般完成的比较差劲而且还容易和另外两个内容混淆，就是planning和goals。</p>\n<ul>\n<li>Forecasting: 是用已知的信息去尽可能准确去预测未来，这些已知信息包含historical data和knowledge of any future events that might impact the forecasts(factors)。</li>\n<li>Goals: 目标是你想要它发生的事情，这里不涉及计划或者你的预测，只是你定的一个方向，能否实现，或者怎么实现都合目标无关。</li>\n<li>Planning: 而计划就是为Forecasting和Goals负责的，计划就涉及根据预测来采取合适的行动从而让你的目标达成。</li>\n</ul>\n<p>Forecasting是管理的决策行动中很关键的一部分，它为决策提供了根据，一般来说预测分为三类</p>\n<ul>\n<li>Short-term forecasts: scheduling of personnel, production and transportation.</li>\n<li>Medium-term forecasts: future resource requirements, such as raw materials, hire personnel, or buy machinery and equipment.</li>\n<li>Long-term forecasts:strategic planning, including market opportunities, environmental factors and internal resources.</li>\n</ul>\n<h2 id=\"3-Determining-what-to-forecast\"><a href=\"#3-Determining-what-to-forecast\" class=\"headerlink\" title=\"3. Determining what to forecast\"></a>3. Determining what to forecast</h2><p>我们做预测的时候首先要清楚的就是预测什么，当面对很多历史数据时，要先根据商业环境和需求明确预测目的</p>\n<ul>\n<li>every product line, or for groups of products?</li>\n<li>every sales outlet, or for outlets grouped by region, or only for total sales?</li>\n<li>weekly data, monthly data or annual data?</li>\n</ul>\n<p>在确定的需要预测是什么之后紧接着的问题就是how frequent，我们需要每天更新预测数据吗，还是每周，每个月？在知道了这些之后才开始怎么预测的问题，就涉及到了methods和data。</p>\n<h2 id=\"4-Forecasting-data-and-methods\"><a href=\"#4-Forecasting-data-and-methods\" class=\"headerlink\" title=\"4. Forecasting data and methods\"></a>4. Forecasting data and methods</h2><p>预测方法的选择取决于可获取的数据，如果我们无法获取到数据，那么可以采用<strong>qualitative forecasting(also known as judgmental forecasting)</strong>方法。而当以下条件满足时我们可以采用<strong>quantitative forecasting</strong>方法。</p>\n<ul>\n<li>numerical information about the past is available;</li>\n<li>it is reasonabe to assume that some aspects of the past patterns will continue into the future.</li>\n</ul>\n<p>有很多quantitative forecasting方法可以采用，一般来说大部分的quantitative prediction问题要么使用series data(collected at regular intervals over time)，要么使用cross-sectional data(collected at a single point in time)。而本书关注于time series domain。</p>\n<h3 id=\"4-1-Time-series-forecasting\"><a href=\"#4-1-Time-series-forecasting\" class=\"headerlink\" title=\"4.1. Time series forecasting\"></a>4.1. Time series forecasting</h3><p>下面是一些例子：</p>\n<ul>\n<li>Daily IBM stock prices</li>\n<li>Monthly rainfall</li>\n<li>Quarterly sales results for Amazon</li>\n<li>Annual Google profits</li>\n</ul>\n<p>本书只关注于一些固定区间时间长度的时间序列，比如hourly, daily, weekly, monthly, quarterly和annually。不关注irregularly spaced time series。<br>最简单的时间序列预测方法就是仅仅根据以往的时序数据来预测未来的时序数据，而不去考虑导致最终结果的因素。常见的用于预测的时间序列模型包括<strong>decomposition models, exponential smoothing models and ARIMA models</strong>。</p>\n<h3 id=\"4-2-Predictor-variables-and-time-series-forecasting\"><a href=\"#4-2-Predictor-variables-and-time-series-forecasting\" class=\"headerlink\" title=\"4.2. Predictor variables and time series forecasting\"></a>4.2. Predictor variables and time series forecasting</h3><p>一般来说，预测变量(predictor variables)在时间序列预测中很有效，假设我们现在想预测某个区域夏季一个小时的供电量，可以采用以下模型。<br>$$<br>\\mathrm{ED} = f(\\mathrm{current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error}).<br>$$<br>其实上述关系也不完全正确，因为供电量中总有一些变化是无法用上述预测变量来解释的，而最右侧的$\\mathrm{error}$项就可以代表随机波动和那些没有被包含到模型中的其他相关变量。我们可以叫上述为<strong>expanatory model</strong>，因为它可以帮助解释是什么引起了供电量需求的变化。<br>因为随着时间变化供电量可以形成一个时间序列，所以我们也可以用一个如下的<strong>time series model</strong>来预测。<br>$$<br>\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, ED_{t-1},ED_{t-2}, ED_{t-3}, \\ldots,error})<br>$$<br>这里$t$表示当前一个小时，$t+1$表示下一个小时，$t-1$表示前一个小时。这里只采用了过去的时序数据，而没有外部变量。同样的，这里的$\\mathrm{error}$表示一些随机波动和没有包含到模型里面的相关变量。当然也有第三种模型结合前两种，可以叫做混合模型。<br>$$<br>\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error})<br>$$<br>这类模型也叫做<strong>dynamic regression model, panel data models, longitudinal models, transfer functions models, linear system models</strong>。</p>\n<h2 id=\"5-The-basic-steps-in-a-forecasting-task\"><a href=\"#5-The-basic-steps-in-a-forecasting-task\" class=\"headerlink\" title=\"5. The basic steps in a forecasting task\"></a>5. The basic steps in a forecasting task</h2><ol>\n<li>Problem definition</li>\n<li>Gathering information</li>\n<li>Preliminary(exploratory analysis)</li>\n<li>Choosing and fitting models</li>\n<li>Using and evaluating a forecasting model</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近开始学习一些有关时间序列模型的内容，在此记录下来。此系列博客主要根据一本在线电子书的内容整理而来，为了目的是记录自己的学习历程，让自己的印象更加深刻。这是这本书的<a href=\"https://www.otexts.org/fpp\" target=\"_blank\" rel=\"noopener\">网页连接</a>。<br>这本数的题目叫做Forecasting:Principles and Practice，原来自己接触的大部分内容都属于机器学习，无非就是两大任务Prediction和Regreesion，而这里的Forecasting本人理解更倾向于是对时间序列进行预测，即预测未来某个时候挥发生的事情，而不是像分类和回归一样针对某个样本判断其类别或者是取值。","more":"</p>\n<h2 id=\"1-What-can-be-forecast\"><a href=\"#1-What-can-be-forecast\" class=\"headerlink\" title=\"1. What can be forecast?\"></a>1. What can be forecast?</h2><p>其实forecast有很多场景，比如预测未来5年整个国家需要的用电量，这会决定国家对于发电厂等基础设备的投资建设；比如预测某个公司下周客服中心的呼叫量，这会决定这个公司应该招收多少客服人员；再比如预测股市的走势以决定怎么投资，预测电商网站的销量以决定需要怎么调整供应链等等。这些场景都有一个共性的问题就是它们所产生的数据具有时序性。而一个事件的可预测性一般由以下几点决定：</p>\n<ul>\n<li>我们是否充分理解导致预测结果的因素</li>\n<li>我们能够获取多少以往的数据</li>\n<li>预测是否会影响我们想要预测的事情</li>\n</ul>\n<p>比如我们要预测用电量的话应该比较容易，因为首先我们有大量的数据，其次我们很理解是什么因素导致了用电量的变化，比如气温，节假日，经济环境等。但是想要预测汇率可能就有些困难了，因为我们虽然有大量的数据，但是我们不知道有哪些确定性的因素会影响汇率的变化。在forecasting中，很重要的一点是我们要知道什么时间我们能够精准的预测，什么时候预测的结果比投硬币要好。好的预测模型通常能够捕获历史数据中的patterns和relationships，而不是简单的复制过去发生的事情。我这里的关键就是我们采用什么样的模型能够把历史数据中的一些噪声给去掉，而提取出那些有效的patterns和relationships，并且根据未来发生事情的factors或者partial pattern来预测它的最终结果。</p>\n<h2 id=\"2-Forecasting-planning-and-goals\"><a href=\"#2-Forecasting-planning-and-goals\" class=\"headerlink\" title=\"2. Forecasting, planning and goals\"></a>2. Forecasting, planning and goals</h2><p>其实forecasting在商业中是一个很常见的统计学任务，它可以为未来的产品规划，物流和人事，提供一个长期的战略计划。但是，在商业环境中forecasting一般完成的比较差劲而且还容易和另外两个内容混淆，就是planning和goals。</p>\n<ul>\n<li>Forecasting: 是用已知的信息去尽可能准确去预测未来，这些已知信息包含historical data和knowledge of any future events that might impact the forecasts(factors)。</li>\n<li>Goals: 目标是你想要它发生的事情，这里不涉及计划或者你的预测，只是你定的一个方向，能否实现，或者怎么实现都合目标无关。</li>\n<li>Planning: 而计划就是为Forecasting和Goals负责的，计划就涉及根据预测来采取合适的行动从而让你的目标达成。</li>\n</ul>\n<p>Forecasting是管理的决策行动中很关键的一部分，它为决策提供了根据，一般来说预测分为三类</p>\n<ul>\n<li>Short-term forecasts: scheduling of personnel, production and transportation.</li>\n<li>Medium-term forecasts: future resource requirements, such as raw materials, hire personnel, or buy machinery and equipment.</li>\n<li>Long-term forecasts:strategic planning, including market opportunities, environmental factors and internal resources.</li>\n</ul>\n<h2 id=\"3-Determining-what-to-forecast\"><a href=\"#3-Determining-what-to-forecast\" class=\"headerlink\" title=\"3. Determining what to forecast\"></a>3. Determining what to forecast</h2><p>我们做预测的时候首先要清楚的就是预测什么，当面对很多历史数据时，要先根据商业环境和需求明确预测目的</p>\n<ul>\n<li>every product line, or for groups of products?</li>\n<li>every sales outlet, or for outlets grouped by region, or only for total sales?</li>\n<li>weekly data, monthly data or annual data?</li>\n</ul>\n<p>在确定的需要预测是什么之后紧接着的问题就是how frequent，我们需要每天更新预测数据吗，还是每周，每个月？在知道了这些之后才开始怎么预测的问题，就涉及到了methods和data。</p>\n<h2 id=\"4-Forecasting-data-and-methods\"><a href=\"#4-Forecasting-data-and-methods\" class=\"headerlink\" title=\"4. Forecasting data and methods\"></a>4. Forecasting data and methods</h2><p>预测方法的选择取决于可获取的数据，如果我们无法获取到数据，那么可以采用<strong>qualitative forecasting(also known as judgmental forecasting)</strong>方法。而当以下条件满足时我们可以采用<strong>quantitative forecasting</strong>方法。</p>\n<ul>\n<li>numerical information about the past is available;</li>\n<li>it is reasonabe to assume that some aspects of the past patterns will continue into the future.</li>\n</ul>\n<p>有很多quantitative forecasting方法可以采用，一般来说大部分的quantitative prediction问题要么使用series data(collected at regular intervals over time)，要么使用cross-sectional data(collected at a single point in time)。而本书关注于time series domain。</p>\n<h3 id=\"4-1-Time-series-forecasting\"><a href=\"#4-1-Time-series-forecasting\" class=\"headerlink\" title=\"4.1. Time series forecasting\"></a>4.1. Time series forecasting</h3><p>下面是一些例子：</p>\n<ul>\n<li>Daily IBM stock prices</li>\n<li>Monthly rainfall</li>\n<li>Quarterly sales results for Amazon</li>\n<li>Annual Google profits</li>\n</ul>\n<p>本书只关注于一些固定区间时间长度的时间序列，比如hourly, daily, weekly, monthly, quarterly和annually。不关注irregularly spaced time series。<br>最简单的时间序列预测方法就是仅仅根据以往的时序数据来预测未来的时序数据，而不去考虑导致最终结果的因素。常见的用于预测的时间序列模型包括<strong>decomposition models, exponential smoothing models and ARIMA models</strong>。</p>\n<h3 id=\"4-2-Predictor-variables-and-time-series-forecasting\"><a href=\"#4-2-Predictor-variables-and-time-series-forecasting\" class=\"headerlink\" title=\"4.2. Predictor variables and time series forecasting\"></a>4.2. Predictor variables and time series forecasting</h3><p>一般来说，预测变量(predictor variables)在时间序列预测中很有效，假设我们现在想预测某个区域夏季一个小时的供电量，可以采用以下模型。<br>$$<br>\\mathrm{ED} = f(\\mathrm{current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error}).<br>$$<br>其实上述关系也不完全正确，因为供电量中总有一些变化是无法用上述预测变量来解释的，而最右侧的$\\mathrm{error}$项就可以代表随机波动和那些没有被包含到模型中的其他相关变量。我们可以叫上述为<strong>expanatory model</strong>，因为它可以帮助解释是什么引起了供电量需求的变化。<br>因为随着时间变化供电量可以形成一个时间序列，所以我们也可以用一个如下的<strong>time series model</strong>来预测。<br>$$<br>\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, ED_{t-1},ED_{t-2}, ED_{t-3}, \\ldots,error})<br>$$<br>这里$t$表示当前一个小时，$t+1$表示下一个小时，$t-1$表示前一个小时。这里只采用了过去的时序数据，而没有外部变量。同样的，这里的$\\mathrm{error}$表示一些随机波动和没有包含到模型里面的相关变量。当然也有第三种模型结合前两种，可以叫做混合模型。<br>$$<br>\\mathrm{ED_{t+1}}=f(\\mathrm{ED_t, current\\ temperature, strength\\ of\\  economy, population, time\\ of\\ day, day\\ of\\ week, error})<br>$$<br>这类模型也叫做<strong>dynamic regression model, panel data models, longitudinal models, transfer functions models, linear system models</strong>。</p>\n<h2 id=\"5-The-basic-steps-in-a-forecasting-task\"><a href=\"#5-The-basic-steps-in-a-forecasting-task\" class=\"headerlink\" title=\"5. The basic steps in a forecasting task\"></a>5. The basic steps in a forecasting task</h2><ol>\n<li>Problem definition</li>\n<li>Gathering information</li>\n<li>Preliminary(exploratory analysis)</li>\n<li>Choosing and fitting models</li>\n<li>Using and evaluating a forecasting model</li>\n</ol>"},{"title":"Co-Transfer Learning Using Coupled Markov Chains","date":"2019-04-25T08:21:47.000Z","_content":"\n个人感觉这篇文章很有新意，扩展了传统的迁移学习场景，和归纳式迁移学习一样，假设目标域也有标签数据，但是它的创新点在于co-transfer，即进行了双向迁移，使得任何一个领域都可以辅助其他领域迁移。而作者实现co-transfer在于利用了两种关系，一种是Intra-relationship，这里可以直接在同一个特征空间内用距离度量来构造；另外一种是inter-relationships，这里很巧妙地借助了co-occurrence information，<!--more-->注意这里的co-occurrence和多视角学习中的instance-level co-occurrence并不相同。 之后将两种关系合并构造一个coupled Markov chain形成了一个联合转移概率图，之后通过向标签分布的概率转移来实现标签预测，这里有趣的是还引入了多标签和标签ranking的概念，有兴趣的同学也可以借鉴这种思想解决多标签分类的问题。\n\n\n## Scene and Motivation\n\n本文提出了一个叫作Co-Transfer Learning的算法，这里的Co-Transfer意为协同迁移。传统的迁移学习场景一般假设利用包含大量有标签数据的源域辅助只包含少量有标签数据的目标域数据进行建模，之后对目标域的无标签数据进行分类。显然传统的迁移学习是单向的，即源域辅助目标域。而本文的Co-Transfer的出发点是能不能作多向的迁移，即没有源域和目标域之分。假设同时有多个领域的数据，其中每个领域都包含一部分有标签数据和一部分无标签数据，本文的目标就是这些领域互相迁移。举个例子，假设现在有文本和图像两个领域的数据，每个领域的数据都包含有标签和无标签两种数据，本文想通过某种方式为这两个领域的数据建立某种桥梁，从而让图像领域的数据辅助文本领域数据的建模，同时文本领域的数据也可以辅助图像领域的建模。如果存在多个领域的话就是多向的，每个领域都可以辅助其它任何一个领域进行建模，从而形成了Co-Transfer的思想。\n\n\n\n## Problem Definition\n\n有了以上出发点，现在就要把问题数学化。首先定义多个领域，这里每个领域定义为一个样本空间和一个特征空间，且每个领域的样本空间和特征空间都不同。将第 $i$ 个样本空间表示为 $\\mathcal{X^{(i)}}$，第 $i$ 个特征空间表示为 $\\mathcal{Y^{(i)}}$，则第 $i$ 个样本空间的某个样本表示为 $x_k^{(i)}$，其对应的特征向量表示为 $\\mathbf{y}_k^{(i)}$ 。且对于任意的 $i\\neq i'$，有 $\\mathcal{X^{(i)}}\\neq \\mathcal{X^{(i')}}$ 且 $\\mathcal{Y^{(i)}}\\neq \\mathcal{Y^{(i')}} $，即每两个领域的样本空间和特征空间均不相同。每个领域都存在一个有标签样本集 $\\mathcal{L^{(i)}}$ 和一个无标签样本集 $\\mathcal{U^{(i)}}$。其中 $\\mathcal{L^{(i)}}$ 可用式(1)表示，${\\bar n_i}$ 第 $i$ 个领域有标签样本的个数。$\\mathcal{U^{(i)}}$ 可用式(2)表示，$\\hat n_i$ 表示第 $i$ 个领域无标签样本的个数。Co-Transfer Learning的目的就是使用所有领域中的有标签样本同时训练 $N$ 个不同的分类器来预测无标签测试样本的类别。\n$$\n\\mathcal {L^{(i)}}=\\{ x_k^{(i)},C_k^{(i)} \\}_{k=1}^{\\bar n_i}\n$$\n\n$$\n\\mathcal {U^{(i)}}=\\{ x_k^{(i)} \\}_{k=\\bar n_i+1}^{\\bar n_i+\\hat n_i}\n$$\n\n\n\n## The Proposed Framework\n\n本文所提方法将问题建模成一个所有样本的联合转移概率图(joint transition probability graph)模型，这样就可以利用topic-sensitive PageRank和random walk with restart的思想来解决co-transfer的问题了。其中transition probabilities可以通过intra-relationships和inter-relationships来构造，这里intra-relationships是指在同一个样本空间内所有样本的关系，它可以基于样本之间的affinity metric来构造，inter-relationships是指在不同样本空间的样本之间的关系，它可以基于样本之间的co-occurrence information来构造。未完待续...\n\n\n\n## Intrarelationships and Interrelationships\n\n式(3)展示出了所有 $N$ 个样本空间的所有样本(有标签和无标签)，第 $i$ 个样本空间的所有样本数为 $n_i=\\bar n_i+\\hat n_i$。为了简化表示，我们设 $n=\\sum _{i=1}^Kn_i$。\n$$\n\\underbrace{x_1^{(1)},\\dots,x_{n_1}^{(1)}}_{\\text{1st instance space}},\\underbrace{x_1^{(2)},\\dots,x_{n_2}^{(2)}}_{\\text{2st instance space}},\\dots,\\underbrace{x_1^{(N)},\\dots,x_{n_N}^{(N)}}_{\\text{Nst instance space}}\n$$\n\n### Intra-relationship\n\n首先我们定义在同一个样本空间内的所有样本之间的intra-relationships，在第 $i$ 个样本空间内的样本 $x_k^{(i)}$ 和 $x_l^{(i)}$ 之间的affinity metric定义为 $a_{k,l}^{(i,i)}$ ， $a_{k,l}^{(i,i)}$ 可以基于两个样本在特征空间的特征表示来计算，如式(4)。\n$$\na_{k,l}^{(i,i)}=exp[\\frac {-\\Vert \\mathbf y_k^{(i)}-\\mathbf y_l^{(i)}\\Vert_2}{2\\sigma^2}]\n$$\n从而所有的 $a_{k,l}^{(i,i)}$ 可以组合形成矩阵 $\\mathbf A^{(i,i)}$，其大小为 $n_i-\\text{by}-n_i$，其中的每个元素都代表此样本空间内两个样本之间的intra-relationship。这里重点来了，我们根据矩阵 $\\mathbf A^{(i,i)}$ 就可以构造一个Markov transition probability matrix $\\mathbf P^{(i,i)}$，怎么构造那，可以对 $\\mathbf A^{(i,i)}$ 的每一列进行归一化从而得到 $\\mathbf P^{(i,i)}$，使得 $\\mathbf P^{(i,i)}$ 的每一列元素的和都为1。因为这里矩阵 $\\mathbf A^{(i,i)}$ 是对称的，所以得到的 $\\mathbf P^{(i,i)}$ 不仅列实现了归一化，行也是归一化的。则矩阵  $\\mathbf P^{(i,i)}$ 定义了在随机游走过程中，当前样本访问其他样本的概率。\n\n\n\n### Inter-relationships\n\n接下来我们定义不同的样本空间之间的inter-relationships，这里关系是基于**co-occurrence information**定义的。将第 $i$ 个样本空间中第 $k$ 个样本和第 $j$ 个样本空间的第 $l$ 个样本之间的关系定义为 $o_{k,l}^{(i,j)}$，则可以基于 $o_{k,l}^{(i,j)}$ 定义一个不同特征空间之间的关系矩阵 $\\mathbf A^{(i,j)}$，其大小为 $n_i-\\text{by}-n_j$。这里 $\\mathbf A^{(i,j)}$ 不一定是对称的，但是一定存在  $[\\mathbf A^{(i,j)}]_{(k,l)}=[\\mathbf A^{(j,i)}]$，这里 $\\mathbf A^{(j,i)}$ 是 $\\mathbf A^{(i,j)}$ 的转置。同样我们把 $\\mathbf A^{(i,j)}$ 针对列归一化，可以得到 $\\mathbf P^{(i,j)}$，注意这里某些列的和可能为0，因为两个样本空间之间存在某些我们找不到co-occurrence information的样本。这种情况下，就令这一列的每个元素值都等于 $\\frac 1 n_i$，从而得到了由一个样本空间到另一个样本空间的概率转移矩阵。\n\n\n\n## Coupled Markov-Chain\n\n由上述过程得到了所有样本空间中样本间的概率转移矩阵，因为有Intra-relationship和inter-relationships，把它们联合起来即为***coupled***，将两种概率转移矩阵联合起来可以构造成一个Markov Chain，即完成了我们最初的目的，就是为所有样本空间中的样本建立某种联系，从而为co-transfer做准备。\n\n那具体怎么联合两种概率转移矩阵那，首先假设在时刻 $t$ 访问样本空间 $i$ 中的所有样本的概率构成一个概率分布向量(probability distribution vector)：$x^{(i)}(t)=[x_1^{(i)}(t),x_2^{(i)}(t),\\dots,x_{n_i}^{(i)}(t)]^{\\mathrm T}$，作为一个概率分布向量，它满足以下条件 $\\sum_{k=1}^{n_i}x_k^{(i)}(t)=1$。在coupled Markov chain中，我们考虑从 $\\lbrace x^{(i)}(t) \\rbrace_{i=1}^N$ 到 $\\lbrace  x^{(i)}(t) \\rbrace_{i=1}^N$ 的一步转移概率，如式(6)所示：\n$$\nx^{(i)}(t+1)=\\sum_{j=1}^N\\lambda_{i,j}\\mathbf P^{(i,j)}x^{(j)}(t),\\quad i=1,2,\\dots,N.\n$$\n上式则表示在 $t+1$ 时刻，访问第 $i$ 个样本空间中样本的概率，等于在 $t$ 时刻从所有样本空间中的样本的转移概率加权和。这里为了保证得到的 $x^{(i)}(t+1)$ 仍然是一个概率分布向量，令 $\\sum_{j=1}^N\\lambda_{i,j}=1$。此处 $\\lambda_{i,j}$ 本质上是在控制从第  $i$ 个样本空间到第 $j$ 个样本空间迁移的知识量。\n\n以矩阵的形式，可以把式(6)表示成式(7)的形式：\n$$\nx(t+1)=\\mathbf P x(t),\\quad\nx(t)=\\begin{pmatrix} x^{(1)}(t) \\\\\\\\ x^{(2)}(t) \\\\\\\\ \\vdots \\\\\\\\ x^{(N)}(t) \\end{pmatrix}, \\quad\n\\mathbf P=\\begin{pmatrix} \n\\lambda_{1,1}\\mathbf P^{(1,1)} & \\lambda_{1,2}\\mathbf P^{(1,2)} & \\dots & \\lambda_{1,N}\\mathbf P^{(1,N)} \\\\\\\\ \n\\lambda_{2,1}\\mathbf P^{(2,1)} & \\lambda_{2,2}\\mathbf P^{(2,2)} & \\dots & \\lambda_{2,N}\\mathbf P^{(2,N)} \\\\\\\\ \n\\vdots & \\vdots & \\vdots & \\vdots \\\\\\\\ \n\\lambda_{N,1}\\mathbf P^{(N,1)} & \\lambda_{N,2}\\mathbf P^{(N,2)} & \\dots & \\lambda_{N,2}\\mathbf P^{(N,2)}\n\\end{pmatrix}\n$$\n此处求出的 $\\mathbf P$ 即为联合转移概率图(joint transition probability graph)。\n\n\n\n## Co-Transfer Learning\n\n给定上述的联合转移概率图后，我们假设一个random walker从已知标签的样本出发，这里的样本就表示图中的nodes。这个random walker根据 $\\mathbf P$ 重复迭代的访问它的neighborhood节点。在每个step中，它的return to training instances的概率是 $\\alpha$，walker最终达到一个steady-state稳定态 $\\mathbf U$，$\\mathbf U$ 最终能给出标签的ranking来表示每个测试样本的标签集的重要性。将上述问题形式化：\n$$\n(1-\\alpha)\\mathbf{PU}+\\alpha\\mathbf Q=\\mathbf U\n$$\n此处 $\\mathbf Q $ ($n-\\text {by}-c$) 是根据来自不用的样本空间中的所有训练数据构造的类标签的概率分布向量(probability distribution vector of the class labels)。这里的restart参数 $\\alpha$ 用于控制 $\\mathbf Q$ 对于最终的label ranking的重要性或者说影响。\n\n因为 $\\mathbf P$ 是已知的，$\\mathbf U$ 是要求解的，所以现在重点就成了给定训练数据，怎么构造 $\\mathbf Q$，我们用以下式子来构造这个标签概率分布矩阵。\n$$\n\\begin{align}\n\\mathbf Q &=[\\mathbf q_1,\\mathbf q_2,\\dots,\\mathbf q_c],\\\\\\\\\n\\mathbf q_d &=[\\mathbf q_d^{(1)},q_d^{(2)},\\dots,q_d^{(N)}],\\\\\\\\\n\\mathbf q_d^{(i)} &=[q_{d,1}^{(i)},q_{d,2}^{(i)},\\dots,q_{d,n_i}^{(i)}] \n\\end{align}\n$$\n 上面式子中 $d=1,2,\\dots,c,$，这里 $c$ 表示类别数，则 $q_d^{(i)}$ 表示在第 $i$ 个样本空间中每个样本属于 $d$ 类的概率，即这里的 $\\mathbf q_d^{(i)}$ 是样本的概率分布向量，它是以如下方式由均匀分布得到的。\n$$\nq_{d,k}^{(i)}=\\lbrace \\begin{matrix} \n\\frac1{l_d^{(i)}},&\\text{if }d\\in C_k^{(i)}, \\\\\\\\ 0, & \\text{otherwise.}\n\\end{matrix}\n$$\n这里的 $q_{d,k}^{(i)}$ 表示样本空间 $i$ 中第 $k$ 个样本属于类别 $d$ 的概率，这里 $l_d^{(i)}$ 表示第 $i$ 个样本空间中属于类别 $d$ 的样本个数。\n\n现在已知了 $\\mathbf Q$ 和 $\\mathbf P$，$\\mathbf U$ 可以通过迭代求解 $\\mathbf U(t)=(1-\\alpha)\\mathbf {PU}(t-1)$ 得到。则样本 $x_k^{(i)}$ 的标签可以通过矩阵 $\\mathbf U$ 对应这个样本那一行概率向量来预测，即如下：\n$$\nl_k^{(i)}=[u_{k,1}^{(i)},u_{k,2}^{(i)},\\dots,u_{k,c}^{(i)}]\n$$\n对于single class标签预测，取式(13)中最大的数值对应的标签就可以。对于multiclass标签预测，我们对这些概率进行一个ranking，取前 $d'$ 个即可。\n\n\n\n## Experiments\n\n实验部分，式(7)中的 $\\lambda$ 是需要人为赋值的，另外还需要co-occurrence information对inter-relationships进行计算。\n\n\n\n## Reference\n\nWu Q , Ng M K , Ye Y . Cotransfer Learning Using Coupled Markov Chains with Restart. *IEEE Intelligent Systems*, 2014, 29(4):26-33.\n\nWu Q , Ng M K , Ye Y . Co-Transfer Learning via Joint Transition Probability Graph Based Method. in *KDD*, 2012.\n\n\n\n\n\n","source":"_posts/Co-Transfer-Learning.md","raw":"---\ntitle: Co-Transfer Learning Using Coupled Markov Chains\ndate: 2019-04-25 16:21:47\ntags: transfer learning\ncategories: transfer learning\n---\n\n个人感觉这篇文章很有新意，扩展了传统的迁移学习场景，和归纳式迁移学习一样，假设目标域也有标签数据，但是它的创新点在于co-transfer，即进行了双向迁移，使得任何一个领域都可以辅助其他领域迁移。而作者实现co-transfer在于利用了两种关系，一种是Intra-relationship，这里可以直接在同一个特征空间内用距离度量来构造；另外一种是inter-relationships，这里很巧妙地借助了co-occurrence information，<!--more-->注意这里的co-occurrence和多视角学习中的instance-level co-occurrence并不相同。 之后将两种关系合并构造一个coupled Markov chain形成了一个联合转移概率图，之后通过向标签分布的概率转移来实现标签预测，这里有趣的是还引入了多标签和标签ranking的概念，有兴趣的同学也可以借鉴这种思想解决多标签分类的问题。\n\n\n## Scene and Motivation\n\n本文提出了一个叫作Co-Transfer Learning的算法，这里的Co-Transfer意为协同迁移。传统的迁移学习场景一般假设利用包含大量有标签数据的源域辅助只包含少量有标签数据的目标域数据进行建模，之后对目标域的无标签数据进行分类。显然传统的迁移学习是单向的，即源域辅助目标域。而本文的Co-Transfer的出发点是能不能作多向的迁移，即没有源域和目标域之分。假设同时有多个领域的数据，其中每个领域都包含一部分有标签数据和一部分无标签数据，本文的目标就是这些领域互相迁移。举个例子，假设现在有文本和图像两个领域的数据，每个领域的数据都包含有标签和无标签两种数据，本文想通过某种方式为这两个领域的数据建立某种桥梁，从而让图像领域的数据辅助文本领域数据的建模，同时文本领域的数据也可以辅助图像领域的建模。如果存在多个领域的话就是多向的，每个领域都可以辅助其它任何一个领域进行建模，从而形成了Co-Transfer的思想。\n\n\n\n## Problem Definition\n\n有了以上出发点，现在就要把问题数学化。首先定义多个领域，这里每个领域定义为一个样本空间和一个特征空间，且每个领域的样本空间和特征空间都不同。将第 $i$ 个样本空间表示为 $\\mathcal{X^{(i)}}$，第 $i$ 个特征空间表示为 $\\mathcal{Y^{(i)}}$，则第 $i$ 个样本空间的某个样本表示为 $x_k^{(i)}$，其对应的特征向量表示为 $\\mathbf{y}_k^{(i)}$ 。且对于任意的 $i\\neq i'$，有 $\\mathcal{X^{(i)}}\\neq \\mathcal{X^{(i')}}$ 且 $\\mathcal{Y^{(i)}}\\neq \\mathcal{Y^{(i')}} $，即每两个领域的样本空间和特征空间均不相同。每个领域都存在一个有标签样本集 $\\mathcal{L^{(i)}}$ 和一个无标签样本集 $\\mathcal{U^{(i)}}$。其中 $\\mathcal{L^{(i)}}$ 可用式(1)表示，${\\bar n_i}$ 第 $i$ 个领域有标签样本的个数。$\\mathcal{U^{(i)}}$ 可用式(2)表示，$\\hat n_i$ 表示第 $i$ 个领域无标签样本的个数。Co-Transfer Learning的目的就是使用所有领域中的有标签样本同时训练 $N$ 个不同的分类器来预测无标签测试样本的类别。\n$$\n\\mathcal {L^{(i)}}=\\{ x_k^{(i)},C_k^{(i)} \\}_{k=1}^{\\bar n_i}\n$$\n\n$$\n\\mathcal {U^{(i)}}=\\{ x_k^{(i)} \\}_{k=\\bar n_i+1}^{\\bar n_i+\\hat n_i}\n$$\n\n\n\n## The Proposed Framework\n\n本文所提方法将问题建模成一个所有样本的联合转移概率图(joint transition probability graph)模型，这样就可以利用topic-sensitive PageRank和random walk with restart的思想来解决co-transfer的问题了。其中transition probabilities可以通过intra-relationships和inter-relationships来构造，这里intra-relationships是指在同一个样本空间内所有样本的关系，它可以基于样本之间的affinity metric来构造，inter-relationships是指在不同样本空间的样本之间的关系，它可以基于样本之间的co-occurrence information来构造。未完待续...\n\n\n\n## Intrarelationships and Interrelationships\n\n式(3)展示出了所有 $N$ 个样本空间的所有样本(有标签和无标签)，第 $i$ 个样本空间的所有样本数为 $n_i=\\bar n_i+\\hat n_i$。为了简化表示，我们设 $n=\\sum _{i=1}^Kn_i$。\n$$\n\\underbrace{x_1^{(1)},\\dots,x_{n_1}^{(1)}}_{\\text{1st instance space}},\\underbrace{x_1^{(2)},\\dots,x_{n_2}^{(2)}}_{\\text{2st instance space}},\\dots,\\underbrace{x_1^{(N)},\\dots,x_{n_N}^{(N)}}_{\\text{Nst instance space}}\n$$\n\n### Intra-relationship\n\n首先我们定义在同一个样本空间内的所有样本之间的intra-relationships，在第 $i$ 个样本空间内的样本 $x_k^{(i)}$ 和 $x_l^{(i)}$ 之间的affinity metric定义为 $a_{k,l}^{(i,i)}$ ， $a_{k,l}^{(i,i)}$ 可以基于两个样本在特征空间的特征表示来计算，如式(4)。\n$$\na_{k,l}^{(i,i)}=exp[\\frac {-\\Vert \\mathbf y_k^{(i)}-\\mathbf y_l^{(i)}\\Vert_2}{2\\sigma^2}]\n$$\n从而所有的 $a_{k,l}^{(i,i)}$ 可以组合形成矩阵 $\\mathbf A^{(i,i)}$，其大小为 $n_i-\\text{by}-n_i$，其中的每个元素都代表此样本空间内两个样本之间的intra-relationship。这里重点来了，我们根据矩阵 $\\mathbf A^{(i,i)}$ 就可以构造一个Markov transition probability matrix $\\mathbf P^{(i,i)}$，怎么构造那，可以对 $\\mathbf A^{(i,i)}$ 的每一列进行归一化从而得到 $\\mathbf P^{(i,i)}$，使得 $\\mathbf P^{(i,i)}$ 的每一列元素的和都为1。因为这里矩阵 $\\mathbf A^{(i,i)}$ 是对称的，所以得到的 $\\mathbf P^{(i,i)}$ 不仅列实现了归一化，行也是归一化的。则矩阵  $\\mathbf P^{(i,i)}$ 定义了在随机游走过程中，当前样本访问其他样本的概率。\n\n\n\n### Inter-relationships\n\n接下来我们定义不同的样本空间之间的inter-relationships，这里关系是基于**co-occurrence information**定义的。将第 $i$ 个样本空间中第 $k$ 个样本和第 $j$ 个样本空间的第 $l$ 个样本之间的关系定义为 $o_{k,l}^{(i,j)}$，则可以基于 $o_{k,l}^{(i,j)}$ 定义一个不同特征空间之间的关系矩阵 $\\mathbf A^{(i,j)}$，其大小为 $n_i-\\text{by}-n_j$。这里 $\\mathbf A^{(i,j)}$ 不一定是对称的，但是一定存在  $[\\mathbf A^{(i,j)}]_{(k,l)}=[\\mathbf A^{(j,i)}]$，这里 $\\mathbf A^{(j,i)}$ 是 $\\mathbf A^{(i,j)}$ 的转置。同样我们把 $\\mathbf A^{(i,j)}$ 针对列归一化，可以得到 $\\mathbf P^{(i,j)}$，注意这里某些列的和可能为0，因为两个样本空间之间存在某些我们找不到co-occurrence information的样本。这种情况下，就令这一列的每个元素值都等于 $\\frac 1 n_i$，从而得到了由一个样本空间到另一个样本空间的概率转移矩阵。\n\n\n\n## Coupled Markov-Chain\n\n由上述过程得到了所有样本空间中样本间的概率转移矩阵，因为有Intra-relationship和inter-relationships，把它们联合起来即为***coupled***，将两种概率转移矩阵联合起来可以构造成一个Markov Chain，即完成了我们最初的目的，就是为所有样本空间中的样本建立某种联系，从而为co-transfer做准备。\n\n那具体怎么联合两种概率转移矩阵那，首先假设在时刻 $t$ 访问样本空间 $i$ 中的所有样本的概率构成一个概率分布向量(probability distribution vector)：$x^{(i)}(t)=[x_1^{(i)}(t),x_2^{(i)}(t),\\dots,x_{n_i}^{(i)}(t)]^{\\mathrm T}$，作为一个概率分布向量，它满足以下条件 $\\sum_{k=1}^{n_i}x_k^{(i)}(t)=1$。在coupled Markov chain中，我们考虑从 $\\lbrace x^{(i)}(t) \\rbrace_{i=1}^N$ 到 $\\lbrace  x^{(i)}(t) \\rbrace_{i=1}^N$ 的一步转移概率，如式(6)所示：\n$$\nx^{(i)}(t+1)=\\sum_{j=1}^N\\lambda_{i,j}\\mathbf P^{(i,j)}x^{(j)}(t),\\quad i=1,2,\\dots,N.\n$$\n上式则表示在 $t+1$ 时刻，访问第 $i$ 个样本空间中样本的概率，等于在 $t$ 时刻从所有样本空间中的样本的转移概率加权和。这里为了保证得到的 $x^{(i)}(t+1)$ 仍然是一个概率分布向量，令 $\\sum_{j=1}^N\\lambda_{i,j}=1$。此处 $\\lambda_{i,j}$ 本质上是在控制从第  $i$ 个样本空间到第 $j$ 个样本空间迁移的知识量。\n\n以矩阵的形式，可以把式(6)表示成式(7)的形式：\n$$\nx(t+1)=\\mathbf P x(t),\\quad\nx(t)=\\begin{pmatrix} x^{(1)}(t) \\\\\\\\ x^{(2)}(t) \\\\\\\\ \\vdots \\\\\\\\ x^{(N)}(t) \\end{pmatrix}, \\quad\n\\mathbf P=\\begin{pmatrix} \n\\lambda_{1,1}\\mathbf P^{(1,1)} & \\lambda_{1,2}\\mathbf P^{(1,2)} & \\dots & \\lambda_{1,N}\\mathbf P^{(1,N)} \\\\\\\\ \n\\lambda_{2,1}\\mathbf P^{(2,1)} & \\lambda_{2,2}\\mathbf P^{(2,2)} & \\dots & \\lambda_{2,N}\\mathbf P^{(2,N)} \\\\\\\\ \n\\vdots & \\vdots & \\vdots & \\vdots \\\\\\\\ \n\\lambda_{N,1}\\mathbf P^{(N,1)} & \\lambda_{N,2}\\mathbf P^{(N,2)} & \\dots & \\lambda_{N,2}\\mathbf P^{(N,2)}\n\\end{pmatrix}\n$$\n此处求出的 $\\mathbf P$ 即为联合转移概率图(joint transition probability graph)。\n\n\n\n## Co-Transfer Learning\n\n给定上述的联合转移概率图后，我们假设一个random walker从已知标签的样本出发，这里的样本就表示图中的nodes。这个random walker根据 $\\mathbf P$ 重复迭代的访问它的neighborhood节点。在每个step中，它的return to training instances的概率是 $\\alpha$，walker最终达到一个steady-state稳定态 $\\mathbf U$，$\\mathbf U$ 最终能给出标签的ranking来表示每个测试样本的标签集的重要性。将上述问题形式化：\n$$\n(1-\\alpha)\\mathbf{PU}+\\alpha\\mathbf Q=\\mathbf U\n$$\n此处 $\\mathbf Q $ ($n-\\text {by}-c$) 是根据来自不用的样本空间中的所有训练数据构造的类标签的概率分布向量(probability distribution vector of the class labels)。这里的restart参数 $\\alpha$ 用于控制 $\\mathbf Q$ 对于最终的label ranking的重要性或者说影响。\n\n因为 $\\mathbf P$ 是已知的，$\\mathbf U$ 是要求解的，所以现在重点就成了给定训练数据，怎么构造 $\\mathbf Q$，我们用以下式子来构造这个标签概率分布矩阵。\n$$\n\\begin{align}\n\\mathbf Q &=[\\mathbf q_1,\\mathbf q_2,\\dots,\\mathbf q_c],\\\\\\\\\n\\mathbf q_d &=[\\mathbf q_d^{(1)},q_d^{(2)},\\dots,q_d^{(N)}],\\\\\\\\\n\\mathbf q_d^{(i)} &=[q_{d,1}^{(i)},q_{d,2}^{(i)},\\dots,q_{d,n_i}^{(i)}] \n\\end{align}\n$$\n 上面式子中 $d=1,2,\\dots,c,$，这里 $c$ 表示类别数，则 $q_d^{(i)}$ 表示在第 $i$ 个样本空间中每个样本属于 $d$ 类的概率，即这里的 $\\mathbf q_d^{(i)}$ 是样本的概率分布向量，它是以如下方式由均匀分布得到的。\n$$\nq_{d,k}^{(i)}=\\lbrace \\begin{matrix} \n\\frac1{l_d^{(i)}},&\\text{if }d\\in C_k^{(i)}, \\\\\\\\ 0, & \\text{otherwise.}\n\\end{matrix}\n$$\n这里的 $q_{d,k}^{(i)}$ 表示样本空间 $i$ 中第 $k$ 个样本属于类别 $d$ 的概率，这里 $l_d^{(i)}$ 表示第 $i$ 个样本空间中属于类别 $d$ 的样本个数。\n\n现在已知了 $\\mathbf Q$ 和 $\\mathbf P$，$\\mathbf U$ 可以通过迭代求解 $\\mathbf U(t)=(1-\\alpha)\\mathbf {PU}(t-1)$ 得到。则样本 $x_k^{(i)}$ 的标签可以通过矩阵 $\\mathbf U$ 对应这个样本那一行概率向量来预测，即如下：\n$$\nl_k^{(i)}=[u_{k,1}^{(i)},u_{k,2}^{(i)},\\dots,u_{k,c}^{(i)}]\n$$\n对于single class标签预测，取式(13)中最大的数值对应的标签就可以。对于multiclass标签预测，我们对这些概率进行一个ranking，取前 $d'$ 个即可。\n\n\n\n## Experiments\n\n实验部分，式(7)中的 $\\lambda$ 是需要人为赋值的，另外还需要co-occurrence information对inter-relationships进行计算。\n\n\n\n## Reference\n\nWu Q , Ng M K , Ye Y . Cotransfer Learning Using Coupled Markov Chains with Restart. *IEEE Intelligent Systems*, 2014, 29(4):26-33.\n\nWu Q , Ng M K , Ye Y . Co-Transfer Learning via Joint Transition Probability Graph Based Method. in *KDD*, 2012.\n\n\n\n\n\n","slug":"Co-Transfer-Learning","published":1,"updated":"2019-07-20T05:53:55.147Z","_id":"cjyb46np9000lsnadheo71ke9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>个人感觉这篇文章很有新意，扩展了传统的迁移学习场景，和归纳式迁移学习一样，假设目标域也有标签数据，但是它的创新点在于co-transfer，即进行了双向迁移，使得任何一个领域都可以辅助其他领域迁移。而作者实现co-transfer在于利用了两种关系，一种是Intra-relationship，这里可以直接在同一个特征空间内用距离度量来构造；另外一种是inter-relationships，这里很巧妙地借助了co-occurrence information，<a id=\"more\"></a>注意这里的co-occurrence和多视角学习中的instance-level co-occurrence并不相同。 之后将两种关系合并构造一个coupled Markov chain形成了一个联合转移概率图，之后通过向标签分布的概率转移来实现标签预测，这里有趣的是还引入了多标签和标签ranking的概念，有兴趣的同学也可以借鉴这种思想解决多标签分类的问题。</p>\n<h2 id=\"Scene-and-Motivation\"><a href=\"#Scene-and-Motivation\" class=\"headerlink\" title=\"Scene and Motivation\"></a>Scene and Motivation</h2><p>本文提出了一个叫作Co-Transfer Learning的算法，这里的Co-Transfer意为协同迁移。传统的迁移学习场景一般假设利用包含大量有标签数据的源域辅助只包含少量有标签数据的目标域数据进行建模，之后对目标域的无标签数据进行分类。显然传统的迁移学习是单向的，即源域辅助目标域。而本文的Co-Transfer的出发点是能不能作多向的迁移，即没有源域和目标域之分。假设同时有多个领域的数据，其中每个领域都包含一部分有标签数据和一部分无标签数据，本文的目标就是这些领域互相迁移。举个例子，假设现在有文本和图像两个领域的数据，每个领域的数据都包含有标签和无标签两种数据，本文想通过某种方式为这两个领域的数据建立某种桥梁，从而让图像领域的数据辅助文本领域数据的建模，同时文本领域的数据也可以辅助图像领域的建模。如果存在多个领域的话就是多向的，每个领域都可以辅助其它任何一个领域进行建模，从而形成了Co-Transfer的思想。</p>\n<h2 id=\"Problem-Definition\"><a href=\"#Problem-Definition\" class=\"headerlink\" title=\"Problem Definition\"></a>Problem Definition</h2><p>有了以上出发点，现在就要把问题数学化。首先定义多个领域，这里每个领域定义为一个样本空间和一个特征空间，且每个领域的样本空间和特征空间都不同。将第 $i$ 个样本空间表示为 $\\mathcal{X^{(i)}}$，第 $i$ 个特征空间表示为 $\\mathcal{Y^{(i)}}$，则第 $i$ 个样本空间的某个样本表示为 $x_k^{(i)}$，其对应的特征向量表示为 $\\mathbf{y}_k^{(i)}$ 。且对于任意的 $i\\neq i’$，有 $\\mathcal{X^{(i)}}\\neq \\mathcal{X^{(i’)}}$ 且 $\\mathcal{Y^{(i)}}\\neq \\mathcal{Y^{(i’)}} $，即每两个领域的样本空间和特征空间均不相同。每个领域都存在一个有标签样本集 $\\mathcal{L^{(i)}}$ 和一个无标签样本集 $\\mathcal{U^{(i)}}$。其中 $\\mathcal{L^{(i)}}$ 可用式(1)表示，${\\bar n_i}$ 第 $i$ 个领域有标签样本的个数。$\\mathcal{U^{(i)}}$ 可用式(2)表示，$\\hat n_i$ 表示第 $i$ 个领域无标签样本的个数。Co-Transfer Learning的目的就是使用所有领域中的有标签样本同时训练 $N$ 个不同的分类器来预测无标签测试样本的类别。<br>$$<br>\\mathcal {L^{(i)}}={ x_k^{(i)},C_k^{(i)} }_{k=1}^{\\bar n_i}<br>$$</p>\n<p>$$<br>\\mathcal {U^{(i)}}={ x_k^{(i)} }_{k=\\bar n_i+1}^{\\bar n_i+\\hat n_i}<br>$$</p>\n<h2 id=\"The-Proposed-Framework\"><a href=\"#The-Proposed-Framework\" class=\"headerlink\" title=\"The Proposed Framework\"></a>The Proposed Framework</h2><p>本文所提方法将问题建模成一个所有样本的联合转移概率图(joint transition probability graph)模型，这样就可以利用topic-sensitive PageRank和random walk with restart的思想来解决co-transfer的问题了。其中transition probabilities可以通过intra-relationships和inter-relationships来构造，这里intra-relationships是指在同一个样本空间内所有样本的关系，它可以基于样本之间的affinity metric来构造，inter-relationships是指在不同样本空间的样本之间的关系，它可以基于样本之间的co-occurrence information来构造。未完待续…</p>\n<h2 id=\"Intrarelationships-and-Interrelationships\"><a href=\"#Intrarelationships-and-Interrelationships\" class=\"headerlink\" title=\"Intrarelationships and Interrelationships\"></a>Intrarelationships and Interrelationships</h2><p>式(3)展示出了所有 $N$ 个样本空间的所有样本(有标签和无标签)，第 $i$ 个样本空间的所有样本数为 $n_i=\\bar n_i+\\hat n_i$。为了简化表示，我们设 $n=\\sum _{i=1}^Kn_i$。<br>$$<br>\\underbrace{x_1^{(1)},\\dots,x_{n_1}^{(1)}}_{\\text{1st instance space}},\\underbrace{x_1^{(2)},\\dots,x_{n_2}^{(2)}}_{\\text{2st instance space}},\\dots,\\underbrace{x_1^{(N)},\\dots,x_{n_N}^{(N)}}_{\\text{Nst instance space}}<br>$$</p>\n<h3 id=\"Intra-relationship\"><a href=\"#Intra-relationship\" class=\"headerlink\" title=\"Intra-relationship\"></a>Intra-relationship</h3><p>首先我们定义在同一个样本空间内的所有样本之间的intra-relationships，在第 $i$ 个样本空间内的样本 $x_k^{(i)}$ 和 $x_l^{(i)}$ 之间的affinity metric定义为 $a_{k,l}^{(i,i)}$ ， $a_{k,l}^{(i,i)}$ 可以基于两个样本在特征空间的特征表示来计算，如式(4)。<br>$$<br>a_{k,l}^{(i,i)}=exp[\\frac {-\\Vert \\mathbf y_k^{(i)}-\\mathbf y_l^{(i)}\\Vert_2}{2\\sigma^2}]<br>$$<br>从而所有的 $a_{k,l}^{(i,i)}$ 可以组合形成矩阵 $\\mathbf A^{(i,i)}$，其大小为 $n_i-\\text{by}-n_i$，其中的每个元素都代表此样本空间内两个样本之间的intra-relationship。这里重点来了，我们根据矩阵 $\\mathbf A^{(i,i)}$ 就可以构造一个Markov transition probability matrix $\\mathbf P^{(i,i)}$，怎么构造那，可以对 $\\mathbf A^{(i,i)}$ 的每一列进行归一化从而得到 $\\mathbf P^{(i,i)}$，使得 $\\mathbf P^{(i,i)}$ 的每一列元素的和都为1。因为这里矩阵 $\\mathbf A^{(i,i)}$ 是对称的，所以得到的 $\\mathbf P^{(i,i)}$ 不仅列实现了归一化，行也是归一化的。则矩阵  $\\mathbf P^{(i,i)}$ 定义了在随机游走过程中，当前样本访问其他样本的概率。</p>\n<h3 id=\"Inter-relationships\"><a href=\"#Inter-relationships\" class=\"headerlink\" title=\"Inter-relationships\"></a>Inter-relationships</h3><p>接下来我们定义不同的样本空间之间的inter-relationships，这里关系是基于<strong>co-occurrence information</strong>定义的。将第 $i$ 个样本空间中第 $k$ 个样本和第 $j$ 个样本空间的第 $l$ 个样本之间的关系定义为 $o_{k,l}^{(i,j)}$，则可以基于 $o_{k,l}^{(i,j)}$ 定义一个不同特征空间之间的关系矩阵 $\\mathbf A^{(i,j)}$，其大小为 $n_i-\\text{by}-n_j$。这里 $\\mathbf A^{(i,j)}$ 不一定是对称的，但是一定存在  $[\\mathbf A^{(i,j)}]_{(k,l)}=[\\mathbf A^{(j,i)}]$，这里 $\\mathbf A^{(j,i)}$ 是 $\\mathbf A^{(i,j)}$ 的转置。同样我们把 $\\mathbf A^{(i,j)}$ 针对列归一化，可以得到 $\\mathbf P^{(i,j)}$，注意这里某些列的和可能为0，因为两个样本空间之间存在某些我们找不到co-occurrence information的样本。这种情况下，就令这一列的每个元素值都等于 $\\frac 1 n_i$，从而得到了由一个样本空间到另一个样本空间的概率转移矩阵。</p>\n<h2 id=\"Coupled-Markov-Chain\"><a href=\"#Coupled-Markov-Chain\" class=\"headerlink\" title=\"Coupled Markov-Chain\"></a>Coupled Markov-Chain</h2><p>由上述过程得到了所有样本空间中样本间的概率转移矩阵，因为有Intra-relationship和inter-relationships，把它们联合起来即为<strong><em>coupled</em></strong>，将两种概率转移矩阵联合起来可以构造成一个Markov Chain，即完成了我们最初的目的，就是为所有样本空间中的样本建立某种联系，从而为co-transfer做准备。</p>\n<p>那具体怎么联合两种概率转移矩阵那，首先假设在时刻 $t$ 访问样本空间 $i$ 中的所有样本的概率构成一个概率分布向量(probability distribution vector)：$x^{(i)}(t)=[x_1^{(i)}(t),x_2^{(i)}(t),\\dots,x_{n_i}^{(i)}(t)]^{\\mathrm T}$，作为一个概率分布向量，它满足以下条件 $\\sum_{k=1}^{n_i}x_k^{(i)}(t)=1$。在coupled Markov chain中，我们考虑从 $\\lbrace x^{(i)}(t) \\rbrace_{i=1}^N$ 到 $\\lbrace  x^{(i)}(t) \\rbrace_{i=1}^N$ 的一步转移概率，如式(6)所示：<br>$$<br>x^{(i)}(t+1)=\\sum_{j=1}^N\\lambda_{i,j}\\mathbf P^{(i,j)}x^{(j)}(t),\\quad i=1,2,\\dots,N.<br>$$<br>上式则表示在 $t+1$ 时刻，访问第 $i$ 个样本空间中样本的概率，等于在 $t$ 时刻从所有样本空间中的样本的转移概率加权和。这里为了保证得到的 $x^{(i)}(t+1)$ 仍然是一个概率分布向量，令 $\\sum_{j=1}^N\\lambda_{i,j}=1$。此处 $\\lambda_{i,j}$ 本质上是在控制从第  $i$ 个样本空间到第 $j$ 个样本空间迁移的知识量。</p>\n<p>以矩阵的形式，可以把式(6)表示成式(7)的形式：<br>$$<br>x(t+1)=\\mathbf P x(t),\\quad<br>x(t)=\\begin{pmatrix} x^{(1)}(t) \\\\ x^{(2)}(t) \\\\ \\vdots \\\\ x^{(N)}(t) \\end{pmatrix}, \\quad<br>\\mathbf P=\\begin{pmatrix}<br>\\lambda_{1,1}\\mathbf P^{(1,1)} &amp; \\lambda_{1,2}\\mathbf P^{(1,2)} &amp; \\dots &amp; \\lambda_{1,N}\\mathbf P^{(1,N)} \\\\<br>\\lambda_{2,1}\\mathbf P^{(2,1)} &amp; \\lambda_{2,2}\\mathbf P^{(2,2)} &amp; \\dots &amp; \\lambda_{2,N}\\mathbf P^{(2,N)} \\\\<br>\\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\\\<br>\\lambda_{N,1}\\mathbf P^{(N,1)} &amp; \\lambda_{N,2}\\mathbf P^{(N,2)} &amp; \\dots &amp; \\lambda_{N,2}\\mathbf P^{(N,2)}<br>\\end{pmatrix}<br>$$<br>此处求出的 $\\mathbf P$ 即为联合转移概率图(joint transition probability graph)。</p>\n<h2 id=\"Co-Transfer-Learning\"><a href=\"#Co-Transfer-Learning\" class=\"headerlink\" title=\"Co-Transfer Learning\"></a>Co-Transfer Learning</h2><p>给定上述的联合转移概率图后，我们假设一个random walker从已知标签的样本出发，这里的样本就表示图中的nodes。这个random walker根据 $\\mathbf P$ 重复迭代的访问它的neighborhood节点。在每个step中，它的return to training instances的概率是 $\\alpha$，walker最终达到一个steady-state稳定态 $\\mathbf U$，$\\mathbf U$ 最终能给出标签的ranking来表示每个测试样本的标签集的重要性。将上述问题形式化：<br>$$<br>(1-\\alpha)\\mathbf{PU}+\\alpha\\mathbf Q=\\mathbf U<br>$$<br>此处 $\\mathbf Q $ ($n-\\text {by}-c$) 是根据来自不用的样本空间中的所有训练数据构造的类标签的概率分布向量(probability distribution vector of the class labels)。这里的restart参数 $\\alpha$ 用于控制 $\\mathbf Q$ 对于最终的label ranking的重要性或者说影响。</p>\n<p>因为 $\\mathbf P$ 是已知的，$\\mathbf U$ 是要求解的，所以现在重点就成了给定训练数据，怎么构造 $\\mathbf Q$，我们用以下式子来构造这个标签概率分布矩阵。<br>$$<br>\\begin{align}<br>\\mathbf Q &amp;=[\\mathbf q_1,\\mathbf q_2,\\dots,\\mathbf q_c],\\\\<br>\\mathbf q_d &amp;=[\\mathbf q_d^{(1)},q_d^{(2)},\\dots,q_d^{(N)}],\\\\<br>\\mathbf q_d^{(i)} &amp;=[q_{d,1}^{(i)},q_{d,2}^{(i)},\\dots,q_{d,n_i}^{(i)}]<br>\\end{align}<br>$$<br> 上面式子中 $d=1,2,\\dots,c,$，这里 $c$ 表示类别数，则 $q_d^{(i)}$ 表示在第 $i$ 个样本空间中每个样本属于 $d$ 类的概率，即这里的 $\\mathbf q_d^{(i)}$ 是样本的概率分布向量，它是以如下方式由均匀分布得到的。<br>$$<br>q_{d,k}^{(i)}=\\lbrace \\begin{matrix}<br>\\frac1{l_d^{(i)}},&amp;\\text{if }d\\in C_k^{(i)}, \\\\ 0, &amp; \\text{otherwise.}<br>\\end{matrix}<br>$$<br>这里的 $q_{d,k}^{(i)}$ 表示样本空间 $i$ 中第 $k$ 个样本属于类别 $d$ 的概率，这里 $l_d^{(i)}$ 表示第 $i$ 个样本空间中属于类别 $d$ 的样本个数。</p>\n<p>现在已知了 $\\mathbf Q$ 和 $\\mathbf P$，$\\mathbf U$ 可以通过迭代求解 $\\mathbf U(t)=(1-\\alpha)\\mathbf {PU}(t-1)$ 得到。则样本 $x_k^{(i)}$ 的标签可以通过矩阵 $\\mathbf U$ 对应这个样本那一行概率向量来预测，即如下：<br>$$<br>l_k^{(i)}=[u_{k,1}^{(i)},u_{k,2}^{(i)},\\dots,u_{k,c}^{(i)}]<br>$$<br>对于single class标签预测，取式(13)中最大的数值对应的标签就可以。对于multiclass标签预测，我们对这些概率进行一个ranking，取前 $d’$ 个即可。</p>\n<h2 id=\"Experiments\"><a href=\"#Experiments\" class=\"headerlink\" title=\"Experiments\"></a>Experiments</h2><p>实验部分，式(7)中的 $\\lambda$ 是需要人为赋值的，另外还需要co-occurrence information对inter-relationships进行计算。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>Wu Q , Ng M K , Ye Y . Cotransfer Learning Using Coupled Markov Chains with Restart. <em>IEEE Intelligent Systems</em>, 2014, 29(4):26-33.</p>\n<p>Wu Q , Ng M K , Ye Y . Co-Transfer Learning via Joint Transition Probability Graph Based Method. in <em>KDD</em>, 2012.</p>\n","site":{"data":{}},"excerpt":"<p>个人感觉这篇文章很有新意，扩展了传统的迁移学习场景，和归纳式迁移学习一样，假设目标域也有标签数据，但是它的创新点在于co-transfer，即进行了双向迁移，使得任何一个领域都可以辅助其他领域迁移。而作者实现co-transfer在于利用了两种关系，一种是Intra-relationship，这里可以直接在同一个特征空间内用距离度量来构造；另外一种是inter-relationships，这里很巧妙地借助了co-occurrence information，","more":"注意这里的co-occurrence和多视角学习中的instance-level co-occurrence并不相同。 之后将两种关系合并构造一个coupled Markov chain形成了一个联合转移概率图，之后通过向标签分布的概率转移来实现标签预测，这里有趣的是还引入了多标签和标签ranking的概念，有兴趣的同学也可以借鉴这种思想解决多标签分类的问题。</p>\n<h2 id=\"Scene-and-Motivation\"><a href=\"#Scene-and-Motivation\" class=\"headerlink\" title=\"Scene and Motivation\"></a>Scene and Motivation</h2><p>本文提出了一个叫作Co-Transfer Learning的算法，这里的Co-Transfer意为协同迁移。传统的迁移学习场景一般假设利用包含大量有标签数据的源域辅助只包含少量有标签数据的目标域数据进行建模，之后对目标域的无标签数据进行分类。显然传统的迁移学习是单向的，即源域辅助目标域。而本文的Co-Transfer的出发点是能不能作多向的迁移，即没有源域和目标域之分。假设同时有多个领域的数据，其中每个领域都包含一部分有标签数据和一部分无标签数据，本文的目标就是这些领域互相迁移。举个例子，假设现在有文本和图像两个领域的数据，每个领域的数据都包含有标签和无标签两种数据，本文想通过某种方式为这两个领域的数据建立某种桥梁，从而让图像领域的数据辅助文本领域数据的建模，同时文本领域的数据也可以辅助图像领域的建模。如果存在多个领域的话就是多向的，每个领域都可以辅助其它任何一个领域进行建模，从而形成了Co-Transfer的思想。</p>\n<h2 id=\"Problem-Definition\"><a href=\"#Problem-Definition\" class=\"headerlink\" title=\"Problem Definition\"></a>Problem Definition</h2><p>有了以上出发点，现在就要把问题数学化。首先定义多个领域，这里每个领域定义为一个样本空间和一个特征空间，且每个领域的样本空间和特征空间都不同。将第 $i$ 个样本空间表示为 $\\mathcal{X^{(i)}}$，第 $i$ 个特征空间表示为 $\\mathcal{Y^{(i)}}$，则第 $i$ 个样本空间的某个样本表示为 $x_k^{(i)}$，其对应的特征向量表示为 $\\mathbf{y}_k^{(i)}$ 。且对于任意的 $i\\neq i’$，有 $\\mathcal{X^{(i)}}\\neq \\mathcal{X^{(i’)}}$ 且 $\\mathcal{Y^{(i)}}\\neq \\mathcal{Y^{(i’)}} $，即每两个领域的样本空间和特征空间均不相同。每个领域都存在一个有标签样本集 $\\mathcal{L^{(i)}}$ 和一个无标签样本集 $\\mathcal{U^{(i)}}$。其中 $\\mathcal{L^{(i)}}$ 可用式(1)表示，${\\bar n_i}$ 第 $i$ 个领域有标签样本的个数。$\\mathcal{U^{(i)}}$ 可用式(2)表示，$\\hat n_i$ 表示第 $i$ 个领域无标签样本的个数。Co-Transfer Learning的目的就是使用所有领域中的有标签样本同时训练 $N$ 个不同的分类器来预测无标签测试样本的类别。<br>$$<br>\\mathcal {L^{(i)}}={ x_k^{(i)},C_k^{(i)} }_{k=1}^{\\bar n_i}<br>$$</p>\n<p>$$<br>\\mathcal {U^{(i)}}={ x_k^{(i)} }_{k=\\bar n_i+1}^{\\bar n_i+\\hat n_i}<br>$$</p>\n<h2 id=\"The-Proposed-Framework\"><a href=\"#The-Proposed-Framework\" class=\"headerlink\" title=\"The Proposed Framework\"></a>The Proposed Framework</h2><p>本文所提方法将问题建模成一个所有样本的联合转移概率图(joint transition probability graph)模型，这样就可以利用topic-sensitive PageRank和random walk with restart的思想来解决co-transfer的问题了。其中transition probabilities可以通过intra-relationships和inter-relationships来构造，这里intra-relationships是指在同一个样本空间内所有样本的关系，它可以基于样本之间的affinity metric来构造，inter-relationships是指在不同样本空间的样本之间的关系，它可以基于样本之间的co-occurrence information来构造。未完待续…</p>\n<h2 id=\"Intrarelationships-and-Interrelationships\"><a href=\"#Intrarelationships-and-Interrelationships\" class=\"headerlink\" title=\"Intrarelationships and Interrelationships\"></a>Intrarelationships and Interrelationships</h2><p>式(3)展示出了所有 $N$ 个样本空间的所有样本(有标签和无标签)，第 $i$ 个样本空间的所有样本数为 $n_i=\\bar n_i+\\hat n_i$。为了简化表示，我们设 $n=\\sum _{i=1}^Kn_i$。<br>$$<br>\\underbrace{x_1^{(1)},\\dots,x_{n_1}^{(1)}}_{\\text{1st instance space}},\\underbrace{x_1^{(2)},\\dots,x_{n_2}^{(2)}}_{\\text{2st instance space}},\\dots,\\underbrace{x_1^{(N)},\\dots,x_{n_N}^{(N)}}_{\\text{Nst instance space}}<br>$$</p>\n<h3 id=\"Intra-relationship\"><a href=\"#Intra-relationship\" class=\"headerlink\" title=\"Intra-relationship\"></a>Intra-relationship</h3><p>首先我们定义在同一个样本空间内的所有样本之间的intra-relationships，在第 $i$ 个样本空间内的样本 $x_k^{(i)}$ 和 $x_l^{(i)}$ 之间的affinity metric定义为 $a_{k,l}^{(i,i)}$ ， $a_{k,l}^{(i,i)}$ 可以基于两个样本在特征空间的特征表示来计算，如式(4)。<br>$$<br>a_{k,l}^{(i,i)}=exp[\\frac {-\\Vert \\mathbf y_k^{(i)}-\\mathbf y_l^{(i)}\\Vert_2}{2\\sigma^2}]<br>$$<br>从而所有的 $a_{k,l}^{(i,i)}$ 可以组合形成矩阵 $\\mathbf A^{(i,i)}$，其大小为 $n_i-\\text{by}-n_i$，其中的每个元素都代表此样本空间内两个样本之间的intra-relationship。这里重点来了，我们根据矩阵 $\\mathbf A^{(i,i)}$ 就可以构造一个Markov transition probability matrix $\\mathbf P^{(i,i)}$，怎么构造那，可以对 $\\mathbf A^{(i,i)}$ 的每一列进行归一化从而得到 $\\mathbf P^{(i,i)}$，使得 $\\mathbf P^{(i,i)}$ 的每一列元素的和都为1。因为这里矩阵 $\\mathbf A^{(i,i)}$ 是对称的，所以得到的 $\\mathbf P^{(i,i)}$ 不仅列实现了归一化，行也是归一化的。则矩阵  $\\mathbf P^{(i,i)}$ 定义了在随机游走过程中，当前样本访问其他样本的概率。</p>\n<h3 id=\"Inter-relationships\"><a href=\"#Inter-relationships\" class=\"headerlink\" title=\"Inter-relationships\"></a>Inter-relationships</h3><p>接下来我们定义不同的样本空间之间的inter-relationships，这里关系是基于<strong>co-occurrence information</strong>定义的。将第 $i$ 个样本空间中第 $k$ 个样本和第 $j$ 个样本空间的第 $l$ 个样本之间的关系定义为 $o_{k,l}^{(i,j)}$，则可以基于 $o_{k,l}^{(i,j)}$ 定义一个不同特征空间之间的关系矩阵 $\\mathbf A^{(i,j)}$，其大小为 $n_i-\\text{by}-n_j$。这里 $\\mathbf A^{(i,j)}$ 不一定是对称的，但是一定存在  $[\\mathbf A^{(i,j)}]_{(k,l)}=[\\mathbf A^{(j,i)}]$，这里 $\\mathbf A^{(j,i)}$ 是 $\\mathbf A^{(i,j)}$ 的转置。同样我们把 $\\mathbf A^{(i,j)}$ 针对列归一化，可以得到 $\\mathbf P^{(i,j)}$，注意这里某些列的和可能为0，因为两个样本空间之间存在某些我们找不到co-occurrence information的样本。这种情况下，就令这一列的每个元素值都等于 $\\frac 1 n_i$，从而得到了由一个样本空间到另一个样本空间的概率转移矩阵。</p>\n<h2 id=\"Coupled-Markov-Chain\"><a href=\"#Coupled-Markov-Chain\" class=\"headerlink\" title=\"Coupled Markov-Chain\"></a>Coupled Markov-Chain</h2><p>由上述过程得到了所有样本空间中样本间的概率转移矩阵，因为有Intra-relationship和inter-relationships，把它们联合起来即为<strong><em>coupled</em></strong>，将两种概率转移矩阵联合起来可以构造成一个Markov Chain，即完成了我们最初的目的，就是为所有样本空间中的样本建立某种联系，从而为co-transfer做准备。</p>\n<p>那具体怎么联合两种概率转移矩阵那，首先假设在时刻 $t$ 访问样本空间 $i$ 中的所有样本的概率构成一个概率分布向量(probability distribution vector)：$x^{(i)}(t)=[x_1^{(i)}(t),x_2^{(i)}(t),\\dots,x_{n_i}^{(i)}(t)]^{\\mathrm T}$，作为一个概率分布向量，它满足以下条件 $\\sum_{k=1}^{n_i}x_k^{(i)}(t)=1$。在coupled Markov chain中，我们考虑从 $\\lbrace x^{(i)}(t) \\rbrace_{i=1}^N$ 到 $\\lbrace  x^{(i)}(t) \\rbrace_{i=1}^N$ 的一步转移概率，如式(6)所示：<br>$$<br>x^{(i)}(t+1)=\\sum_{j=1}^N\\lambda_{i,j}\\mathbf P^{(i,j)}x^{(j)}(t),\\quad i=1,2,\\dots,N.<br>$$<br>上式则表示在 $t+1$ 时刻，访问第 $i$ 个样本空间中样本的概率，等于在 $t$ 时刻从所有样本空间中的样本的转移概率加权和。这里为了保证得到的 $x^{(i)}(t+1)$ 仍然是一个概率分布向量，令 $\\sum_{j=1}^N\\lambda_{i,j}=1$。此处 $\\lambda_{i,j}$ 本质上是在控制从第  $i$ 个样本空间到第 $j$ 个样本空间迁移的知识量。</p>\n<p>以矩阵的形式，可以把式(6)表示成式(7)的形式：<br>$$<br>x(t+1)=\\mathbf P x(t),\\quad<br>x(t)=\\begin{pmatrix} x^{(1)}(t) \\\\ x^{(2)}(t) \\\\ \\vdots \\\\ x^{(N)}(t) \\end{pmatrix}, \\quad<br>\\mathbf P=\\begin{pmatrix}<br>\\lambda_{1,1}\\mathbf P^{(1,1)} &amp; \\lambda_{1,2}\\mathbf P^{(1,2)} &amp; \\dots &amp; \\lambda_{1,N}\\mathbf P^{(1,N)} \\\\<br>\\lambda_{2,1}\\mathbf P^{(2,1)} &amp; \\lambda_{2,2}\\mathbf P^{(2,2)} &amp; \\dots &amp; \\lambda_{2,N}\\mathbf P^{(2,N)} \\\\<br>\\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\\\<br>\\lambda_{N,1}\\mathbf P^{(N,1)} &amp; \\lambda_{N,2}\\mathbf P^{(N,2)} &amp; \\dots &amp; \\lambda_{N,2}\\mathbf P^{(N,2)}<br>\\end{pmatrix}<br>$$<br>此处求出的 $\\mathbf P$ 即为联合转移概率图(joint transition probability graph)。</p>\n<h2 id=\"Co-Transfer-Learning\"><a href=\"#Co-Transfer-Learning\" class=\"headerlink\" title=\"Co-Transfer Learning\"></a>Co-Transfer Learning</h2><p>给定上述的联合转移概率图后，我们假设一个random walker从已知标签的样本出发，这里的样本就表示图中的nodes。这个random walker根据 $\\mathbf P$ 重复迭代的访问它的neighborhood节点。在每个step中，它的return to training instances的概率是 $\\alpha$，walker最终达到一个steady-state稳定态 $\\mathbf U$，$\\mathbf U$ 最终能给出标签的ranking来表示每个测试样本的标签集的重要性。将上述问题形式化：<br>$$<br>(1-\\alpha)\\mathbf{PU}+\\alpha\\mathbf Q=\\mathbf U<br>$$<br>此处 $\\mathbf Q $ ($n-\\text {by}-c$) 是根据来自不用的样本空间中的所有训练数据构造的类标签的概率分布向量(probability distribution vector of the class labels)。这里的restart参数 $\\alpha$ 用于控制 $\\mathbf Q$ 对于最终的label ranking的重要性或者说影响。</p>\n<p>因为 $\\mathbf P$ 是已知的，$\\mathbf U$ 是要求解的，所以现在重点就成了给定训练数据，怎么构造 $\\mathbf Q$，我们用以下式子来构造这个标签概率分布矩阵。<br>$$<br>\\begin{align}<br>\\mathbf Q &amp;=[\\mathbf q_1,\\mathbf q_2,\\dots,\\mathbf q_c],\\\\<br>\\mathbf q_d &amp;=[\\mathbf q_d^{(1)},q_d^{(2)},\\dots,q_d^{(N)}],\\\\<br>\\mathbf q_d^{(i)} &amp;=[q_{d,1}^{(i)},q_{d,2}^{(i)},\\dots,q_{d,n_i}^{(i)}]<br>\\end{align}<br>$$<br> 上面式子中 $d=1,2,\\dots,c,$，这里 $c$ 表示类别数，则 $q_d^{(i)}$ 表示在第 $i$ 个样本空间中每个样本属于 $d$ 类的概率，即这里的 $\\mathbf q_d^{(i)}$ 是样本的概率分布向量，它是以如下方式由均匀分布得到的。<br>$$<br>q_{d,k}^{(i)}=\\lbrace \\begin{matrix}<br>\\frac1{l_d^{(i)}},&amp;\\text{if }d\\in C_k^{(i)}, \\\\ 0, &amp; \\text{otherwise.}<br>\\end{matrix}<br>$$<br>这里的 $q_{d,k}^{(i)}$ 表示样本空间 $i$ 中第 $k$ 个样本属于类别 $d$ 的概率，这里 $l_d^{(i)}$ 表示第 $i$ 个样本空间中属于类别 $d$ 的样本个数。</p>\n<p>现在已知了 $\\mathbf Q$ 和 $\\mathbf P$，$\\mathbf U$ 可以通过迭代求解 $\\mathbf U(t)=(1-\\alpha)\\mathbf {PU}(t-1)$ 得到。则样本 $x_k^{(i)}$ 的标签可以通过矩阵 $\\mathbf U$ 对应这个样本那一行概率向量来预测，即如下：<br>$$<br>l_k^{(i)}=[u_{k,1}^{(i)},u_{k,2}^{(i)},\\dots,u_{k,c}^{(i)}]<br>$$<br>对于single class标签预测，取式(13)中最大的数值对应的标签就可以。对于multiclass标签预测，我们对这些概率进行一个ranking，取前 $d’$ 个即可。</p>\n<h2 id=\"Experiments\"><a href=\"#Experiments\" class=\"headerlink\" title=\"Experiments\"></a>Experiments</h2><p>实验部分，式(7)中的 $\\lambda$ 是需要人为赋值的，另外还需要co-occurrence information对inter-relationships进行计算。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>Wu Q , Ng M K , Ye Y . Cotransfer Learning Using Coupled Markov Chains with Restart. <em>IEEE Intelligent Systems</em>, 2014, 29(4):26-33.</p>\n<p>Wu Q , Ng M K , Ye Y . Co-Transfer Learning via Joint Transition Probability Graph Based Method. in <em>KDD</em>, 2012.</p>"},{"title":"Exploring Randomly Wired Neural Networks","date":"2019-05-03T12:45:32.000Z","_content":"\n不同与以往的网络结构搜索算法，本文没有使用强化学习的方式令搜索出来的网络结构分类精度的reward很高。而是加不受限制的随机连接结构有怎样的表现。实验结果显示随机网络生成器所生成的网络结构的表现大多情况下能和人为设计的，通过NAS搜索得到的结果相媲美。一方面这篇文章提出了这种新的思想，就是设计不同的网络生成器；<!--more-->另一方面，结果表明用RL方式的暴力搜索其实并没有很大的优势，距离AutoML也还很遥远。由此启发我们从设计不同的搜索算法，搜索空间转而研究设计具有不同的先验知识的网络生成器。\n\n\n## 1. Motivation\n\n现在大多数神经网络的成功在于其复杂的网络结构设计，为了探索网络结构对于深度学习的优势，网络结构搜索成了近一两年较为热门的方向。网络结构搜索 (neural architecture search, NAS)致力于同时优化网络的连接机构和操作算子，然而这类算法中网络结构的搜索过程都是认为设计的，所以网络结构的空间受到了很大的限制。所以，本文通过随机连接网络探索了更加多样性的网络结构。整个模型可以叫做随机网络生成器，实验结果显示，通过探索在更加不受约束的搜索空间中设计网络生成器会有不错的前景。\n\n试验结果显示：\n-  这些随机网络生成器的几个不同变种所产生的网络结构，都可以在Imagenet上面展现出竞争性的优势。其中最好的生成器能产生一些可以媲美甚至超过完全人为设计的或者是通过NAS搜索得到的网络结构。\n-  同一个网络生成器所生成的网络精度方差较低。\n-  不同的网络生成器生成的网络之间精度有明显差别。\n-  上述讨论表明网络生成器的设计很关键。\n\n\n## 2. Methodology\n为了扩大网络生成器的搜索空间，本文提出了随机连接神经网络。\n\n先简要定义一下网络生成器，给定参数 $\\theta$ ，网络生成器 $g$ 会生成一个确定的网络，每次给定相同的 $\\theta$，$g$ 一定能产生相同的网络结构。如果网络生成器可以接受另外一个随机种子参数 $s$，通过这个随机种子，多次运行 $g(\\theta,s)$ 网络生成器可以产生一族网络结构，我们就叫这个生成器为随机网络生成器 $g(\\theta, s)$。(**这里有个问题，每次给定相同的随机种子，随机网络生成器是不是也可以产生不同的网络结构**)\n文献[1]中使用了循环神经网络RNN作为网络生成器，这里RNN可以输出一些列字符串，这些字符串定义的就是网络结构的超参数(比如，卷积网络每一层的kernel width，kernel height，stride width stride height，filter number)。这里训练这个神经网络是个难点，因为这里并不像传统RNN作为seq2seq模型有输入序列的监督信息可以使用反向传播来训练。本文作者采用了强化学习的策略梯度算法(policy gradient algorithm)中的REIFORCE算法，即使用reward来训练模型。本文中的reward指的是用这个RNN生成一个字符串网络后，训练并测试这个网络，这个网络的精度就是reward，而这个网络结构其实就是强化学习模型中的策略，也就是我们最后想学习的内容。(**这里怎么用上述所提算法更新整个模型是个难点**)\n文献[2]中也是使用循环神经网络作为网络生成器，它和[1]不同的是，它生成的是一个cell，这个cell由5个参数构成，即RNN可以生成5个参数，对应于5种不同的操作，这个RNN生成的每种操作的输出都是一个softmax分类层，类别是我们预先定义好的不同的操作类型。所以本文做的网络搜索其实是在搜索一种有效的cell结构，之后再将很多个cell拼接起来构成一个网络。这里采用的学习算法和[1]中一样，都是REINFORCE算法。\n上述两种网络搜索框架的缺陷是，它们都通过预定义的内容限制了网络的搜索空间，比如文献[1]中的搜索方式虽然可以产生多变的卷积核大小，步长，通道数，但是层与层之间的连接方式很受限制。文献[2]中的搜索结构是cell，预定义的内容直接限制了cell的构成结构，只不过一个cell中的操作算法可以变化。总之传统的NAS算法的搜索空间会被很多先验知识所限定。本文提出了随机连接网络，**从而使得网络结构的搜索空间受到更少的限制，但是这里其实操作算子还是受到一定程度的限制**。\n\n## 3. Random Neural Generator\n本文使用随机图定义的随机网络生成器来生成不同的网络结构，本文选择了三种不同的已有随机图模型，在生成图模型之后，将图模型转化成网络结构。所以本文的两个核心问题点就是：\n-  使用什么样的随机图模型生成随机图结构\n-  怎么将图结构转化成对应的网络结构\n\n### 3.1. Random Graph\n本文选择了三种随机图模型，分别是ER，BA，WS，下面简要讲解以下三种随机图模型。\n-  ER是最简单的随机图模型，它假设给定N个节点，然后迭代地以概率P对任意两个节点进行连接，在遍历完所有的配对节点之后救生成了一个随机图。所以这个随机模型只有一个参数就是P。\n-  BA算法以添加新节点的方式生成随机图模型，假设一开始有M个节点，它们之间没有任何边的连接。接下来每新添加一个节点就添加M条新边，怎么添加这M条边那，当将新添加的节点连接到点 $v$ 时，它连接到这个点的概率正比于这个点的degree。就这样重复这个过程知道这个点拥有M条边，之后以同样的方式添加另外的节点，直到一共有N个节点。所以最终生成的图一共有$M*(N-M)$ 条边。所以这个随机模型的唯一参数就是M。\n-  WS是它们三个中较为复杂的一个随机模型。首先N个节点呈环形摆放，给定一个偶数K，每个节点都与其相邻的K/2个节点相连接。之后按顺时针顺序，对于每个节点 $v$，连接这个节点和它下面的第 $i$ 个节点的边都以概率 $P$ 重新连接。这里第 $i$ 个节点是以均匀分布的方式随机选择的，不过即不选择节点 $v$ 也不选择重复的边，这个选择过程重复K/2次。所以这个随机模型的参数有两个，分别是K和P。\n\n### 3.2. Generate Network Structures from Graphs\n用上述三种方式生成图之后是无向图，首先我们需要将其转化成有向图模型。转换时现将每个图的所有节点附上序号，然后根据这些序号，使得每条边的方向都是从序号小的节点指向序号大的节点。那又按照什么策略给这些点赋序号那：对于ER模型，随机赋值。对于BA模型，初始的M个节点赋值为1到M，其余节点按其添加顺序赋值。WS模型，按照顺时针方向对所有节点赋值。\n得到有向图之后，就要将其转化成网络结构。这里假设边就是数据流，代表一个节点的数据流向两外一个节点。节点就是运算操作，每个节点都会受到多条边的输入，也会产生多条边的输出。这里我们假设一个节点就由三种操作构成，分别是聚合操作(aggregation)，转换操作(transformation)和分发操作(distribution)。聚合操作就是几条输入边的数据的加权和，这里存在可学习的权值。转换操作就是一个ReLU-Conv-BN的三联操作。分发操作就是将节点数据复制多份分别传输到不同的边上。\n**由上述过程可知，其实虽然所提算法在网络结构上的搜索空间更大了，但是在操作上也严重限制了搜索空间，因为由生成的图转化成网络的过程中，所有运算都是固定的**。\n\n这里为了提高模型的能力，进行的分阶段构造，上述过程生成的一个图算是传统网络的一层，这样堆叠多个图，就构成了一个多层的网络。\n\n## 4. Design and Optimization\n整个算法过程涉及的参数其实并不多。有每个图的节点数N，和每种随机图的参数。因为我们最终作了图的堆叠，所以还需要设置堆叠的图的个数，还有每个节点中的卷积操作的输出通道数和卷积步长。\n\n## 5. Reference\n[1] Zoph B, Le Q V. Neural Architecture Search with Reinforcement Learning[J]. international conference on learning representations, 2017.\n[2] Zoph B, Vasudevan V, Shlens J, et al. Learning Transferable Architectures for Scalable Image Recognition[J]. computer vision and pattern recognition, 2018: 8697-8710.\n[3] Exploring Randomly Wired Neural Networks for Image Recognition. CoRR: abs/1904.01569\n","source":"_posts/random network generator.md","raw":"---\ntitle: Exploring Randomly Wired Neural Networks\ndate: 2019-05-03 20:45:32\ntags: random neural network, neural architecture search\ncategories: neural architecture search\n---\n\n不同与以往的网络结构搜索算法，本文没有使用强化学习的方式令搜索出来的网络结构分类精度的reward很高。而是加不受限制的随机连接结构有怎样的表现。实验结果显示随机网络生成器所生成的网络结构的表现大多情况下能和人为设计的，通过NAS搜索得到的结果相媲美。一方面这篇文章提出了这种新的思想，就是设计不同的网络生成器；<!--more-->另一方面，结果表明用RL方式的暴力搜索其实并没有很大的优势，距离AutoML也还很遥远。由此启发我们从设计不同的搜索算法，搜索空间转而研究设计具有不同的先验知识的网络生成器。\n\n\n## 1. Motivation\n\n现在大多数神经网络的成功在于其复杂的网络结构设计，为了探索网络结构对于深度学习的优势，网络结构搜索成了近一两年较为热门的方向。网络结构搜索 (neural architecture search, NAS)致力于同时优化网络的连接机构和操作算子，然而这类算法中网络结构的搜索过程都是认为设计的，所以网络结构的空间受到了很大的限制。所以，本文通过随机连接网络探索了更加多样性的网络结构。整个模型可以叫做随机网络生成器，实验结果显示，通过探索在更加不受约束的搜索空间中设计网络生成器会有不错的前景。\n\n试验结果显示：\n-  这些随机网络生成器的几个不同变种所产生的网络结构，都可以在Imagenet上面展现出竞争性的优势。其中最好的生成器能产生一些可以媲美甚至超过完全人为设计的或者是通过NAS搜索得到的网络结构。\n-  同一个网络生成器所生成的网络精度方差较低。\n-  不同的网络生成器生成的网络之间精度有明显差别。\n-  上述讨论表明网络生成器的设计很关键。\n\n\n## 2. Methodology\n为了扩大网络生成器的搜索空间，本文提出了随机连接神经网络。\n\n先简要定义一下网络生成器，给定参数 $\\theta$ ，网络生成器 $g$ 会生成一个确定的网络，每次给定相同的 $\\theta$，$g$ 一定能产生相同的网络结构。如果网络生成器可以接受另外一个随机种子参数 $s$，通过这个随机种子，多次运行 $g(\\theta,s)$ 网络生成器可以产生一族网络结构，我们就叫这个生成器为随机网络生成器 $g(\\theta, s)$。(**这里有个问题，每次给定相同的随机种子，随机网络生成器是不是也可以产生不同的网络结构**)\n文献[1]中使用了循环神经网络RNN作为网络生成器，这里RNN可以输出一些列字符串，这些字符串定义的就是网络结构的超参数(比如，卷积网络每一层的kernel width，kernel height，stride width stride height，filter number)。这里训练这个神经网络是个难点，因为这里并不像传统RNN作为seq2seq模型有输入序列的监督信息可以使用反向传播来训练。本文作者采用了强化学习的策略梯度算法(policy gradient algorithm)中的REIFORCE算法，即使用reward来训练模型。本文中的reward指的是用这个RNN生成一个字符串网络后，训练并测试这个网络，这个网络的精度就是reward，而这个网络结构其实就是强化学习模型中的策略，也就是我们最后想学习的内容。(**这里怎么用上述所提算法更新整个模型是个难点**)\n文献[2]中也是使用循环神经网络作为网络生成器，它和[1]不同的是，它生成的是一个cell，这个cell由5个参数构成，即RNN可以生成5个参数，对应于5种不同的操作，这个RNN生成的每种操作的输出都是一个softmax分类层，类别是我们预先定义好的不同的操作类型。所以本文做的网络搜索其实是在搜索一种有效的cell结构，之后再将很多个cell拼接起来构成一个网络。这里采用的学习算法和[1]中一样，都是REINFORCE算法。\n上述两种网络搜索框架的缺陷是，它们都通过预定义的内容限制了网络的搜索空间，比如文献[1]中的搜索方式虽然可以产生多变的卷积核大小，步长，通道数，但是层与层之间的连接方式很受限制。文献[2]中的搜索结构是cell，预定义的内容直接限制了cell的构成结构，只不过一个cell中的操作算法可以变化。总之传统的NAS算法的搜索空间会被很多先验知识所限定。本文提出了随机连接网络，**从而使得网络结构的搜索空间受到更少的限制，但是这里其实操作算子还是受到一定程度的限制**。\n\n## 3. Random Neural Generator\n本文使用随机图定义的随机网络生成器来生成不同的网络结构，本文选择了三种不同的已有随机图模型，在生成图模型之后，将图模型转化成网络结构。所以本文的两个核心问题点就是：\n-  使用什么样的随机图模型生成随机图结构\n-  怎么将图结构转化成对应的网络结构\n\n### 3.1. Random Graph\n本文选择了三种随机图模型，分别是ER，BA，WS，下面简要讲解以下三种随机图模型。\n-  ER是最简单的随机图模型，它假设给定N个节点，然后迭代地以概率P对任意两个节点进行连接，在遍历完所有的配对节点之后救生成了一个随机图。所以这个随机模型只有一个参数就是P。\n-  BA算法以添加新节点的方式生成随机图模型，假设一开始有M个节点，它们之间没有任何边的连接。接下来每新添加一个节点就添加M条新边，怎么添加这M条边那，当将新添加的节点连接到点 $v$ 时，它连接到这个点的概率正比于这个点的degree。就这样重复这个过程知道这个点拥有M条边，之后以同样的方式添加另外的节点，直到一共有N个节点。所以最终生成的图一共有$M*(N-M)$ 条边。所以这个随机模型的唯一参数就是M。\n-  WS是它们三个中较为复杂的一个随机模型。首先N个节点呈环形摆放，给定一个偶数K，每个节点都与其相邻的K/2个节点相连接。之后按顺时针顺序，对于每个节点 $v$，连接这个节点和它下面的第 $i$ 个节点的边都以概率 $P$ 重新连接。这里第 $i$ 个节点是以均匀分布的方式随机选择的，不过即不选择节点 $v$ 也不选择重复的边，这个选择过程重复K/2次。所以这个随机模型的参数有两个，分别是K和P。\n\n### 3.2. Generate Network Structures from Graphs\n用上述三种方式生成图之后是无向图，首先我们需要将其转化成有向图模型。转换时现将每个图的所有节点附上序号，然后根据这些序号，使得每条边的方向都是从序号小的节点指向序号大的节点。那又按照什么策略给这些点赋序号那：对于ER模型，随机赋值。对于BA模型，初始的M个节点赋值为1到M，其余节点按其添加顺序赋值。WS模型，按照顺时针方向对所有节点赋值。\n得到有向图之后，就要将其转化成网络结构。这里假设边就是数据流，代表一个节点的数据流向两外一个节点。节点就是运算操作，每个节点都会受到多条边的输入，也会产生多条边的输出。这里我们假设一个节点就由三种操作构成，分别是聚合操作(aggregation)，转换操作(transformation)和分发操作(distribution)。聚合操作就是几条输入边的数据的加权和，这里存在可学习的权值。转换操作就是一个ReLU-Conv-BN的三联操作。分发操作就是将节点数据复制多份分别传输到不同的边上。\n**由上述过程可知，其实虽然所提算法在网络结构上的搜索空间更大了，但是在操作上也严重限制了搜索空间，因为由生成的图转化成网络的过程中，所有运算都是固定的**。\n\n这里为了提高模型的能力，进行的分阶段构造，上述过程生成的一个图算是传统网络的一层，这样堆叠多个图，就构成了一个多层的网络。\n\n## 4. Design and Optimization\n整个算法过程涉及的参数其实并不多。有每个图的节点数N，和每种随机图的参数。因为我们最终作了图的堆叠，所以还需要设置堆叠的图的个数，还有每个节点中的卷积操作的输出通道数和卷积步长。\n\n## 5. Reference\n[1] Zoph B, Le Q V. Neural Architecture Search with Reinforcement Learning[J]. international conference on learning representations, 2017.\n[2] Zoph B, Vasudevan V, Shlens J, et al. Learning Transferable Architectures for Scalable Image Recognition[J]. computer vision and pattern recognition, 2018: 8697-8710.\n[3] Exploring Randomly Wired Neural Networks for Image Recognition. CoRR: abs/1904.01569\n","slug":"random network generator","published":1,"updated":"2019-07-20T04:39:38.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyb46np9000msnadi8e6oy1q","content":"<p>不同与以往的网络结构搜索算法，本文没有使用强化学习的方式令搜索出来的网络结构分类精度的reward很高。而是加不受限制的随机连接结构有怎样的表现。实验结果显示随机网络生成器所生成的网络结构的表现大多情况下能和人为设计的，通过NAS搜索得到的结果相媲美。一方面这篇文章提出了这种新的思想，就是设计不同的网络生成器；<a id=\"more\"></a>另一方面，结果表明用RL方式的暴力搜索其实并没有很大的优势，距离AutoML也还很遥远。由此启发我们从设计不同的搜索算法，搜索空间转而研究设计具有不同的先验知识的网络生成器。</p>\n<h2 id=\"1-Motivation\"><a href=\"#1-Motivation\" class=\"headerlink\" title=\"1. Motivation\"></a>1. Motivation</h2><p>现在大多数神经网络的成功在于其复杂的网络结构设计，为了探索网络结构对于深度学习的优势，网络结构搜索成了近一两年较为热门的方向。网络结构搜索 (neural architecture search, NAS)致力于同时优化网络的连接机构和操作算子，然而这类算法中网络结构的搜索过程都是认为设计的，所以网络结构的空间受到了很大的限制。所以，本文通过随机连接网络探索了更加多样性的网络结构。整个模型可以叫做随机网络生成器，实验结果显示，通过探索在更加不受约束的搜索空间中设计网络生成器会有不错的前景。</p>\n<p>试验结果显示：</p>\n<ul>\n<li>这些随机网络生成器的几个不同变种所产生的网络结构，都可以在Imagenet上面展现出竞争性的优势。其中最好的生成器能产生一些可以媲美甚至超过完全人为设计的或者是通过NAS搜索得到的网络结构。</li>\n<li>同一个网络生成器所生成的网络精度方差较低。</li>\n<li>不同的网络生成器生成的网络之间精度有明显差别。</li>\n<li>上述讨论表明网络生成器的设计很关键。</li>\n</ul>\n<h2 id=\"2-Methodology\"><a href=\"#2-Methodology\" class=\"headerlink\" title=\"2. Methodology\"></a>2. Methodology</h2><p>为了扩大网络生成器的搜索空间，本文提出了随机连接神经网络。</p>\n<p>先简要定义一下网络生成器，给定参数 $\\theta$ ，网络生成器 $g$ 会生成一个确定的网络，每次给定相同的 $\\theta$，$g$ 一定能产生相同的网络结构。如果网络生成器可以接受另外一个随机种子参数 $s$，通过这个随机种子，多次运行 $g(\\theta,s)$ 网络生成器可以产生一族网络结构，我们就叫这个生成器为随机网络生成器 $g(\\theta, s)$。(<strong>这里有个问题，每次给定相同的随机种子，随机网络生成器是不是也可以产生不同的网络结构</strong>)<br>文献[1]中使用了循环神经网络RNN作为网络生成器，这里RNN可以输出一些列字符串，这些字符串定义的就是网络结构的超参数(比如，卷积网络每一层的kernel width，kernel height，stride width stride height，filter number)。这里训练这个神经网络是个难点，因为这里并不像传统RNN作为seq2seq模型有输入序列的监督信息可以使用反向传播来训练。本文作者采用了强化学习的策略梯度算法(policy gradient algorithm)中的REIFORCE算法，即使用reward来训练模型。本文中的reward指的是用这个RNN生成一个字符串网络后，训练并测试这个网络，这个网络的精度就是reward，而这个网络结构其实就是强化学习模型中的策略，也就是我们最后想学习的内容。(<strong>这里怎么用上述所提算法更新整个模型是个难点</strong>)<br>文献[2]中也是使用循环神经网络作为网络生成器，它和[1]不同的是，它生成的是一个cell，这个cell由5个参数构成，即RNN可以生成5个参数，对应于5种不同的操作，这个RNN生成的每种操作的输出都是一个softmax分类层，类别是我们预先定义好的不同的操作类型。所以本文做的网络搜索其实是在搜索一种有效的cell结构，之后再将很多个cell拼接起来构成一个网络。这里采用的学习算法和[1]中一样，都是REINFORCE算法。<br>上述两种网络搜索框架的缺陷是，它们都通过预定义的内容限制了网络的搜索空间，比如文献[1]中的搜索方式虽然可以产生多变的卷积核大小，步长，通道数，但是层与层之间的连接方式很受限制。文献[2]中的搜索结构是cell，预定义的内容直接限制了cell的构成结构，只不过一个cell中的操作算法可以变化。总之传统的NAS算法的搜索空间会被很多先验知识所限定。本文提出了随机连接网络，<strong>从而使得网络结构的搜索空间受到更少的限制，但是这里其实操作算子还是受到一定程度的限制</strong>。</p>\n<h2 id=\"3-Random-Neural-Generator\"><a href=\"#3-Random-Neural-Generator\" class=\"headerlink\" title=\"3. Random Neural Generator\"></a>3. Random Neural Generator</h2><p>本文使用随机图定义的随机网络生成器来生成不同的网络结构，本文选择了三种不同的已有随机图模型，在生成图模型之后，将图模型转化成网络结构。所以本文的两个核心问题点就是：</p>\n<ul>\n<li>使用什么样的随机图模型生成随机图结构</li>\n<li>怎么将图结构转化成对应的网络结构</li>\n</ul>\n<h3 id=\"3-1-Random-Graph\"><a href=\"#3-1-Random-Graph\" class=\"headerlink\" title=\"3.1. Random Graph\"></a>3.1. Random Graph</h3><p>本文选择了三种随机图模型，分别是ER，BA，WS，下面简要讲解以下三种随机图模型。</p>\n<ul>\n<li>ER是最简单的随机图模型，它假设给定N个节点，然后迭代地以概率P对任意两个节点进行连接，在遍历完所有的配对节点之后救生成了一个随机图。所以这个随机模型只有一个参数就是P。</li>\n<li>BA算法以添加新节点的方式生成随机图模型，假设一开始有M个节点，它们之间没有任何边的连接。接下来每新添加一个节点就添加M条新边，怎么添加这M条边那，当将新添加的节点连接到点 $v$ 时，它连接到这个点的概率正比于这个点的degree。就这样重复这个过程知道这个点拥有M条边，之后以同样的方式添加另外的节点，直到一共有N个节点。所以最终生成的图一共有$M*(N-M)$ 条边。所以这个随机模型的唯一参数就是M。</li>\n<li>WS是它们三个中较为复杂的一个随机模型。首先N个节点呈环形摆放，给定一个偶数K，每个节点都与其相邻的K/2个节点相连接。之后按顺时针顺序，对于每个节点 $v$，连接这个节点和它下面的第 $i$ 个节点的边都以概率 $P$ 重新连接。这里第 $i$ 个节点是以均匀分布的方式随机选择的，不过即不选择节点 $v$ 也不选择重复的边，这个选择过程重复K/2次。所以这个随机模型的参数有两个，分别是K和P。</li>\n</ul>\n<h3 id=\"3-2-Generate-Network-Structures-from-Graphs\"><a href=\"#3-2-Generate-Network-Structures-from-Graphs\" class=\"headerlink\" title=\"3.2. Generate Network Structures from Graphs\"></a>3.2. Generate Network Structures from Graphs</h3><p>用上述三种方式生成图之后是无向图，首先我们需要将其转化成有向图模型。转换时现将每个图的所有节点附上序号，然后根据这些序号，使得每条边的方向都是从序号小的节点指向序号大的节点。那又按照什么策略给这些点赋序号那：对于ER模型，随机赋值。对于BA模型，初始的M个节点赋值为1到M，其余节点按其添加顺序赋值。WS模型，按照顺时针方向对所有节点赋值。<br>得到有向图之后，就要将其转化成网络结构。这里假设边就是数据流，代表一个节点的数据流向两外一个节点。节点就是运算操作，每个节点都会受到多条边的输入，也会产生多条边的输出。这里我们假设一个节点就由三种操作构成，分别是聚合操作(aggregation)，转换操作(transformation)和分发操作(distribution)。聚合操作就是几条输入边的数据的加权和，这里存在可学习的权值。转换操作就是一个ReLU-Conv-BN的三联操作。分发操作就是将节点数据复制多份分别传输到不同的边上。<br><strong>由上述过程可知，其实虽然所提算法在网络结构上的搜索空间更大了，但是在操作上也严重限制了搜索空间，因为由生成的图转化成网络的过程中，所有运算都是固定的</strong>。</p>\n<p>这里为了提高模型的能力，进行的分阶段构造，上述过程生成的一个图算是传统网络的一层，这样堆叠多个图，就构成了一个多层的网络。</p>\n<h2 id=\"4-Design-and-Optimization\"><a href=\"#4-Design-and-Optimization\" class=\"headerlink\" title=\"4. Design and Optimization\"></a>4. Design and Optimization</h2><p>整个算法过程涉及的参数其实并不多。有每个图的节点数N，和每种随机图的参数。因为我们最终作了图的堆叠，所以还需要设置堆叠的图的个数，还有每个节点中的卷积操作的输出通道数和卷积步长。</p>\n<h2 id=\"5-Reference\"><a href=\"#5-Reference\" class=\"headerlink\" title=\"5. Reference\"></a>5. Reference</h2><p>[1] Zoph B, Le Q V. Neural Architecture Search with Reinforcement Learning[J]. international conference on learning representations, 2017.<br>[2] Zoph B, Vasudevan V, Shlens J, et al. Learning Transferable Architectures for Scalable Image Recognition[J]. computer vision and pattern recognition, 2018: 8697-8710.<br>[3] Exploring Randomly Wired Neural Networks for Image Recognition. CoRR: abs/1904.01569</p>\n","site":{"data":{}},"excerpt":"<p>不同与以往的网络结构搜索算法，本文没有使用强化学习的方式令搜索出来的网络结构分类精度的reward很高。而是加不受限制的随机连接结构有怎样的表现。实验结果显示随机网络生成器所生成的网络结构的表现大多情况下能和人为设计的，通过NAS搜索得到的结果相媲美。一方面这篇文章提出了这种新的思想，就是设计不同的网络生成器；","more":"另一方面，结果表明用RL方式的暴力搜索其实并没有很大的优势，距离AutoML也还很遥远。由此启发我们从设计不同的搜索算法，搜索空间转而研究设计具有不同的先验知识的网络生成器。</p>\n<h2 id=\"1-Motivation\"><a href=\"#1-Motivation\" class=\"headerlink\" title=\"1. Motivation\"></a>1. Motivation</h2><p>现在大多数神经网络的成功在于其复杂的网络结构设计，为了探索网络结构对于深度学习的优势，网络结构搜索成了近一两年较为热门的方向。网络结构搜索 (neural architecture search, NAS)致力于同时优化网络的连接机构和操作算子，然而这类算法中网络结构的搜索过程都是认为设计的，所以网络结构的空间受到了很大的限制。所以，本文通过随机连接网络探索了更加多样性的网络结构。整个模型可以叫做随机网络生成器，实验结果显示，通过探索在更加不受约束的搜索空间中设计网络生成器会有不错的前景。</p>\n<p>试验结果显示：</p>\n<ul>\n<li>这些随机网络生成器的几个不同变种所产生的网络结构，都可以在Imagenet上面展现出竞争性的优势。其中最好的生成器能产生一些可以媲美甚至超过完全人为设计的或者是通过NAS搜索得到的网络结构。</li>\n<li>同一个网络生成器所生成的网络精度方差较低。</li>\n<li>不同的网络生成器生成的网络之间精度有明显差别。</li>\n<li>上述讨论表明网络生成器的设计很关键。</li>\n</ul>\n<h2 id=\"2-Methodology\"><a href=\"#2-Methodology\" class=\"headerlink\" title=\"2. Methodology\"></a>2. Methodology</h2><p>为了扩大网络生成器的搜索空间，本文提出了随机连接神经网络。</p>\n<p>先简要定义一下网络生成器，给定参数 $\\theta$ ，网络生成器 $g$ 会生成一个确定的网络，每次给定相同的 $\\theta$，$g$ 一定能产生相同的网络结构。如果网络生成器可以接受另外一个随机种子参数 $s$，通过这个随机种子，多次运行 $g(\\theta,s)$ 网络生成器可以产生一族网络结构，我们就叫这个生成器为随机网络生成器 $g(\\theta, s)$。(<strong>这里有个问题，每次给定相同的随机种子，随机网络生成器是不是也可以产生不同的网络结构</strong>)<br>文献[1]中使用了循环神经网络RNN作为网络生成器，这里RNN可以输出一些列字符串，这些字符串定义的就是网络结构的超参数(比如，卷积网络每一层的kernel width，kernel height，stride width stride height，filter number)。这里训练这个神经网络是个难点，因为这里并不像传统RNN作为seq2seq模型有输入序列的监督信息可以使用反向传播来训练。本文作者采用了强化学习的策略梯度算法(policy gradient algorithm)中的REIFORCE算法，即使用reward来训练模型。本文中的reward指的是用这个RNN生成一个字符串网络后，训练并测试这个网络，这个网络的精度就是reward，而这个网络结构其实就是强化学习模型中的策略，也就是我们最后想学习的内容。(<strong>这里怎么用上述所提算法更新整个模型是个难点</strong>)<br>文献[2]中也是使用循环神经网络作为网络生成器，它和[1]不同的是，它生成的是一个cell，这个cell由5个参数构成，即RNN可以生成5个参数，对应于5种不同的操作，这个RNN生成的每种操作的输出都是一个softmax分类层，类别是我们预先定义好的不同的操作类型。所以本文做的网络搜索其实是在搜索一种有效的cell结构，之后再将很多个cell拼接起来构成一个网络。这里采用的学习算法和[1]中一样，都是REINFORCE算法。<br>上述两种网络搜索框架的缺陷是，它们都通过预定义的内容限制了网络的搜索空间，比如文献[1]中的搜索方式虽然可以产生多变的卷积核大小，步长，通道数，但是层与层之间的连接方式很受限制。文献[2]中的搜索结构是cell，预定义的内容直接限制了cell的构成结构，只不过一个cell中的操作算法可以变化。总之传统的NAS算法的搜索空间会被很多先验知识所限定。本文提出了随机连接网络，<strong>从而使得网络结构的搜索空间受到更少的限制，但是这里其实操作算子还是受到一定程度的限制</strong>。</p>\n<h2 id=\"3-Random-Neural-Generator\"><a href=\"#3-Random-Neural-Generator\" class=\"headerlink\" title=\"3. Random Neural Generator\"></a>3. Random Neural Generator</h2><p>本文使用随机图定义的随机网络生成器来生成不同的网络结构，本文选择了三种不同的已有随机图模型，在生成图模型之后，将图模型转化成网络结构。所以本文的两个核心问题点就是：</p>\n<ul>\n<li>使用什么样的随机图模型生成随机图结构</li>\n<li>怎么将图结构转化成对应的网络结构</li>\n</ul>\n<h3 id=\"3-1-Random-Graph\"><a href=\"#3-1-Random-Graph\" class=\"headerlink\" title=\"3.1. Random Graph\"></a>3.1. Random Graph</h3><p>本文选择了三种随机图模型，分别是ER，BA，WS，下面简要讲解以下三种随机图模型。</p>\n<ul>\n<li>ER是最简单的随机图模型，它假设给定N个节点，然后迭代地以概率P对任意两个节点进行连接，在遍历完所有的配对节点之后救生成了一个随机图。所以这个随机模型只有一个参数就是P。</li>\n<li>BA算法以添加新节点的方式生成随机图模型，假设一开始有M个节点，它们之间没有任何边的连接。接下来每新添加一个节点就添加M条新边，怎么添加这M条边那，当将新添加的节点连接到点 $v$ 时，它连接到这个点的概率正比于这个点的degree。就这样重复这个过程知道这个点拥有M条边，之后以同样的方式添加另外的节点，直到一共有N个节点。所以最终生成的图一共有$M*(N-M)$ 条边。所以这个随机模型的唯一参数就是M。</li>\n<li>WS是它们三个中较为复杂的一个随机模型。首先N个节点呈环形摆放，给定一个偶数K，每个节点都与其相邻的K/2个节点相连接。之后按顺时针顺序，对于每个节点 $v$，连接这个节点和它下面的第 $i$ 个节点的边都以概率 $P$ 重新连接。这里第 $i$ 个节点是以均匀分布的方式随机选择的，不过即不选择节点 $v$ 也不选择重复的边，这个选择过程重复K/2次。所以这个随机模型的参数有两个，分别是K和P。</li>\n</ul>\n<h3 id=\"3-2-Generate-Network-Structures-from-Graphs\"><a href=\"#3-2-Generate-Network-Structures-from-Graphs\" class=\"headerlink\" title=\"3.2. Generate Network Structures from Graphs\"></a>3.2. Generate Network Structures from Graphs</h3><p>用上述三种方式生成图之后是无向图，首先我们需要将其转化成有向图模型。转换时现将每个图的所有节点附上序号，然后根据这些序号，使得每条边的方向都是从序号小的节点指向序号大的节点。那又按照什么策略给这些点赋序号那：对于ER模型，随机赋值。对于BA模型，初始的M个节点赋值为1到M，其余节点按其添加顺序赋值。WS模型，按照顺时针方向对所有节点赋值。<br>得到有向图之后，就要将其转化成网络结构。这里假设边就是数据流，代表一个节点的数据流向两外一个节点。节点就是运算操作，每个节点都会受到多条边的输入，也会产生多条边的输出。这里我们假设一个节点就由三种操作构成，分别是聚合操作(aggregation)，转换操作(transformation)和分发操作(distribution)。聚合操作就是几条输入边的数据的加权和，这里存在可学习的权值。转换操作就是一个ReLU-Conv-BN的三联操作。分发操作就是将节点数据复制多份分别传输到不同的边上。<br><strong>由上述过程可知，其实虽然所提算法在网络结构上的搜索空间更大了，但是在操作上也严重限制了搜索空间，因为由生成的图转化成网络的过程中，所有运算都是固定的</strong>。</p>\n<p>这里为了提高模型的能力，进行的分阶段构造，上述过程生成的一个图算是传统网络的一层，这样堆叠多个图，就构成了一个多层的网络。</p>\n<h2 id=\"4-Design-and-Optimization\"><a href=\"#4-Design-and-Optimization\" class=\"headerlink\" title=\"4. Design and Optimization\"></a>4. Design and Optimization</h2><p>整个算法过程涉及的参数其实并不多。有每个图的节点数N，和每种随机图的参数。因为我们最终作了图的堆叠，所以还需要设置堆叠的图的个数，还有每个节点中的卷积操作的输出通道数和卷积步长。</p>\n<h2 id=\"5-Reference\"><a href=\"#5-Reference\" class=\"headerlink\" title=\"5. Reference\"></a>5. Reference</h2><p>[1] Zoph B, Le Q V. Neural Architecture Search with Reinforcement Learning[J]. international conference on learning representations, 2017.<br>[2] Zoph B, Vasudevan V, Shlens J, et al. Learning Transferable Architectures for Scalable Image Recognition[J]. computer vision and pattern recognition, 2018: 8697-8710.<br>[3] Exploring Randomly Wired Neural Networks for Image Recognition. CoRR: abs/1904.01569</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyb46now0008snadnhahhlno","category_id":"cjyb46not0004snadcmoo2kae","_id":"cjyb46np0000dsnadfcg6kokt"},{"post_id":"cjyb46nom0000snadtxauahcr","category_id":"cjyb46not0004snadcmoo2kae","_id":"cjyb46np1000hsnads7hkjlx8"},{"post_id":"cjyb46nor0002snaduasth06x","category_id":"cjyb46not0004snadcmoo2kae","_id":"cjyb46np2000isnadiyoiqefh"},{"post_id":"cjyb46nov0006snadbjp35x4w","category_id":"cjyb46not0004snadcmoo2kae","_id":"cjyb46np2000ksnaddfdysna5"},{"post_id":"cjyb46np9000lsnadheo71ke9","category_id":"cjyb46npa000nsnadvr6qr73e","_id":"cjyb46npc000ssnadd78fr9id"},{"post_id":"cjyb46np9000msnadi8e6oy1q","category_id":"cjyb46npb000psnadjupz19hj","_id":"cjyb46npc000usnadior2v7wc"}],"PostTag":[{"post_id":"cjyb46now0008snadnhahhlno","tag_id":"cjyb46nou0005snadq6wn4pud","_id":"cjyb46noz000bsnadxm9oh7gd"},{"post_id":"cjyb46nom0000snadtxauahcr","tag_id":"cjyb46nou0005snadq6wn4pud","_id":"cjyb46np0000csnadnzf9a7qk"},{"post_id":"cjyb46nor0002snaduasth06x","tag_id":"cjyb46nou0005snadq6wn4pud","_id":"cjyb46np1000gsnadz1unmdx6"},{"post_id":"cjyb46nov0006snadbjp35x4w","tag_id":"cjyb46nou0005snadq6wn4pud","_id":"cjyb46np2000jsnadodxg10x7"},{"post_id":"cjyb46np9000lsnadheo71ke9","tag_id":"cjyb46npa000osnadlrqoaubv","_id":"cjyb46npc000rsnadwjsyv3dn"},{"post_id":"cjyb46np9000msnadi8e6oy1q","tag_id":"cjyb46npb000qsnadk8uk2ckm","_id":"cjyb46npc000tsnadl1qrdbz4"}],"Tag":[{"name":"time series models","_id":"cjyb46nou0005snadq6wn4pud"},{"name":"transfer learning","_id":"cjyb46npa000osnadlrqoaubv"},{"name":"random neural network, neural architecture search","_id":"cjyb46npb000qsnadk8uk2ckm"}]}}